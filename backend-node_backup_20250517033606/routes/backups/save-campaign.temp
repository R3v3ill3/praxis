// /var/www/praxis-dev/backend-node/routes/save-campaign.js
import express from 'express';
// Correctly import db and Timestamp from your firebase.js and firebase-admin respectively
import { db } from '../firebase.js'; // Adjusted path to your firebase.js
import { Timestamp } from 'firebase-admin/firestore'; // Timestamp is part of firebase-admin/firestore

const router = express.Router();

// The firebase.js file handles initialization when it's imported.
// No need to call an explicit initializeAppIfNeeded() function here.

/**
 * Helper function to save/update campaign data in Firestore.
 * This is based on your recovered backup.
 * @param {string} campaignId - If null/undefined, a new ID will be generated.
 * @param {object} campaignData - The data to save.
 * @returns {Promise<object>} result with id
 */
async function storeCampaignInFirestore(campaignId, campaignData) {
  // 'db' is now the imported Firestore instance from firebase.js
  if (!db) {
    console.error("❌ Firestore DB instance is not available. Firebase Admin SDK might not have initialized correctly.");
    throw new Error("Firestore service is unavailable.");
  }

  let docRef;
  let newCampaignId = campaignId;

  if (newCampaignId) {
    docRef = db.collection('campaigns').doc(newCampaignId);
  } else {
    docRef = db.collection('campaigns').doc(); // Let Firestore generate a new ID
    newCampaignId = docRef.id; // Get the new ID
  }

  const dataToSave = {
    ...campaignData,
    id: newCampaignId, // Ensure the ID is part of the document
    updatedAt: Timestamp.now(),
  };

  if (!campaignId) { // If it's a new campaign, add createdAt
    dataToSave.createdAt = Timestamp.now();
  }

  await docRef.set(dataToSave, { merge: true }); // Use merge:true to allow updates
  console.log(`Campaign data ${campaignId ? 'updated' : 'created'} successfully with ID: ${newCampaignId}`);
  return { success: true, id: newCampaignId, message: `Campaign ${campaignId ? 'updated' : 'created'}` };
}

// Route to handle saving/updating campaign progress
router.post('/', async (req, res) => {
  console.log("✅ [/api/save-campaign] HIT");
  const { campaignId, summary, classification, goals, messaging_inputs } = req.body;

  if (!summary || !classification || !goals) {
    console.error("❌ [/api/save-campaign] Missing required campaign data (summary, classification, or goals).");
    return res.status(400).json({ error: 'Missing required campaign data: summary, classification, and goals are needed.' });
  }

  const campaignDataPayload = {
    summary,
    classification,
    goals,
    ...(messaging_inputs && { messaging_inputs }),
  };

  try {
    console.log(`[/api/save-campaign] Attempting to save/update campaign. Provided ID: ${campaignId || 'None (new campaign)'}`);
    const result = await storeCampaignInFirestore(campaignId, campaignDataPayload);
    console.log(`[/api/save-campaign] Firestore operation successful:`, result);
    return res.status(200).json(result);
  } catch (error) {
    console.error('❌ [/api/save-campaign] Error saving campaign to Firestore:', error.message, error.stack);
    return res.status(500).json({ error: 'Failed to save campaign progress.', details: error.message });
  }
});

export default router;
