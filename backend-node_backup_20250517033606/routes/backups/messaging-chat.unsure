// backend-node/routes/messaging-chat.js
import express from 'express';
import OpenAI from 'openai';

const router = express.Router();

let openai;
try {
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    if (!process.env.OPENAI_API_KEY) {
        console.error("❌ OPENAI_API_KEY is not set. Messaging chat will likely fail.");
    }
} catch (e) {
    console.error("❌ Failed to initialize OpenAI client:", e.message);
    openai = null;
}

// --- Field Definitions ---
const REQUIRED_KEYS = [
    "issueName", "geographicContext", "proposedChange", "primaryAudience", "desiredOutcome"
];

const ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES = {
    "issueName": "The core issue or problem your campaign addresses",
    "geographicContext": "The specific location or community context of your campaign",
    "proposedChange": "The specific change or solution your campaign is proposing",
    "primaryAudience": "The main group of people you want to reach and persuade with your messaging",
    "desiredOutcome": "The ultimate outcome or impact you hope to achieve with the campaign (this may be related to your main campaign goals)",

    "audienceProfile.demographics": "Key demographics of your primary audience (e.g., age, gender, occupation, location)",
    "audienceProfile.psychographics": "Common values, attitudes, lifestyles, or beliefs of your audience",
    "audienceProfile.priorBeliefs": "What your audience likely already thinks or feels about the issue or proposed change",
    "audienceProfile.mediaHabits": "How or where your audience typically gets their information (e.g., social media, local news, word-of-mouth)",
    "campaignObjective": "A specific objective for this messaging effort (e.g., raise awareness, encourage a specific action, build support)",
    "deliveryContext.format": "The planned formats for delivering these messages (e.g., social media posts, flyers, emails, public talks)",
    "deliveryContext.messenger": "Who would be the most credible or relatable person/group to deliver these messages",
    "deliveryContext.timing": "Any specific timing considerations for message delivery (e.g., tied to an event, a particular phase of the campaign)",
    "knownComparisons": "Any similar campaigns or efforts (successful or not) that you are aware of that might offer insights",
    "benchmarkData": "Any existing data, statistics, or benchmarks related to the issue or audience awareness"
};
const ORDERED_ALL_POTENTIAL_KEYS = Object.keys(ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES);
const OPTIONAL_KEYS = ORDERED_ALL_POTENTIAL_KEYS.filter(k => !REQUIRED_KEYS.includes(k));

const MAX_OPTIONAL_FIELDS_TO_ATTEMPT = 4; // After required are done, we'll try to get up to this many optional fields.

const initialMessagingInputsState = {
    issueName: '',
    geographicContext: '',
    proposedChange: '',
    primaryAudience: '',
    desiredOutcome: '',
    audienceProfile: {
        demographics: '',
        psychographics: '',
        priorBeliefs: '',
        mediaHabits: ''
    },
    campaignObjective: '',
    deliveryContext: {
        format: '',
        messenger: '',
        timing: ''
    },
    knownComparisons: '',
    benchmarkData: ''
};

// --- Helper Functions ---
function getFieldValue(obj, path) {
    if (!obj) return undefined;
    const parts = path.split('.');
    let current = obj;
    for (const part of parts) {
        if (current && typeof current === 'object' && part in current) {
            current = current[part];
        } else {
            return undefined;
        }
    }
    return current;
}

function identifyStillNeeded(knownInputs, keysToCheck) {
    const needed = [];
    // console.log("identifyStillNeeded: Checking against keys:", keysToCheck);
    // console.log("identifyStillNeeded: Using knownInputs:", JSON.stringify(knownInputs, null, 2));
    for (const key of keysToCheck) {
        const value = getFieldValue(knownInputs, key);
        // console.log(`  Checking key: "${key}", Value: "${value}" (type: ${typeof value})`);
        if (value === undefined || value === null || (typeof value === 'string' && value.trim() === '')) {
            needed.push(key);
        }
    }
    // console.log("identifyStillNeeded: Found needed keys:", needed);
    return needed;
}

function buildIntroMessage(inputs, nextFieldKey, classification) {
    const lines = [];
    lines.push("👋 Let's work on your messaging strategy. To start, I'll confirm what I understand about your campaign so far (some of this may be pre-filled from your earlier campaign setup):");
    if (inputs.issueName) lines.push(`- **Issue**: ${inputs.issueName}`);
    if (classification && classification.primary_type) {
        lines.push(`- **Campaign Type**: ${classification.primary_type}${classification.secondary_type ? ' - ' + classification.secondary_type : ''}${classification.use_case ? ' (' + classification.use_case + ')' : ''}`);
    }
    if (inputs.primaryAudience) lines.push(`- **Primary Audience**: ${inputs.primaryAudience}`);
    if (inputs.desiredOutcome) lines.push(`- **Desired Outcome**: ${inputs.desiredOutcome}`);
    lines.push('\nOkay, let\'s dive a bit deeper.');

    const specificPrompts = { /* ... same as your version, ensure keys match ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES ... */ };
    lines.push(specificPrompts[nextFieldKey] || `First, can you tell me about: ${ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[nextFieldKey]}?`);
    return lines.join('\n');
}

// --- Route Handler ---
router.post('/', async (req, res) => {
    console.log("\n=============== /api/messaging-chat HIT ===============");
    if (!openai) {
        console.error("❌ OpenAI client not initialized. Aborting.");
        return res.status(500).json({ error: 'AI service is not configured properly.' });
    }

    const { campaignId, conversationHistory, knownInputs, classification } = req.body; // Added classification

    console.log("BACKEND: Received campaignId:", campaignId);
    // console.log("BACKEND: Received conversationHistory:", conversationHistory); // Can be verbose
    console.log("BACKEND: Received knownInputs:", JSON.stringify(knownInputs, null, 2));
    console.log("BACKEND: Received classification:", JSON.stringify(classification, null, 2));


    if (!conversationHistory || !Array.isArray(conversationHistory) || !knownInputs || !classification) {
        console.error("❌ Invalid request body parameters:", { conversationHistory: !!conversationHistory, knownInputs: !!knownInputs, classification: !!classification });
        return res.status(400).json({ error: 'Missing or invalid request body parameters: conversationHistory, knownInputs, and classification are required.' });
    }
    
    let currentInputs;
    try {
        currentInputs = {
            ...initialMessagingInputsState,
            ...knownInputs,
            audienceProfile: { ...(initialMessagingInputsState.audienceProfile || {}), ...(knownInputs.audienceProfile || {}) },
            deliveryContext: { ...(initialMessagingInputsState.deliveryContext || {}), ...(knownInputs.deliveryContext || {}) },
        };
    } catch (mergeError) { /* ... error handling ... */ }
    console.log("BACKEND: Effective currentInputs for logic:", JSON.stringify(currentInputs, null, 2));


    const stillNeededRequiredKeys = identifyStillNeeded(currentInputs, REQUIRED_KEYS);
    const stillNeededOptionalKeys = identifyStillNeeded(currentInputs, OPTIONAL_KEYS);
    const filledOptionalKeysCount = OPTIONAL_KEYS.length - stillNeededOptionalKeys.length;

    console.log("BACKEND: Still needed REQUIRED keys:", stillNeededRequiredKeys);
    console.log("BACKEND: Still needed OPTIONAL keys:", stillNeededOptionalKeys);
    console.log("BACKEND: Filled OPTIONAL keys count:", filledOptionalKeysCount);

    // --- Completion Logic ---
    if (stillNeededRequiredKeys.length === 0) {
        if (stillNeededOptionalKeys.length === 0 || filledOptionalKeysCount >= MAX_OPTIONAL_FIELDS_TO_ATTEMPT) {
            let completionMessage = "Thanks! I think we have a good amount of information to start drafting the messaging guide.";
            if (stillNeededOptionalKeys.length === 0) {
                completionMessage = "Excellent! We've gathered all the details for every field.";
            } else if (filledOptionalKeysCount >= MAX_OPTIONAL_FIELDS_TO_ATTEMPT) {
                completionMessage = `Great, that's plenty of detail for the optional items (${filledOptionalKeysCount} provided). I think we have enough to proceed.`;
            }
            console.log("BACKEND: Reporting completion. Reason:", completionMessage);
            return res.json({
                aiMessage: completionMessage,
                updatedKnownInputs: currentInputs,
                fieldInFocus: null,
                isComplete: true
            });
        }
    }

    // --- Determine Next Question ---
    let nextFieldToQuery;
    let askingRequired = false;
    if (stillNeededRequiredKeys.length > 0) {
        nextFieldToQuery = stillNeededRequiredKeys[0];
        askingRequired = true;
    } else { // All required are filled, ask an optional one
        nextFieldToQuery = stillNeededOptionalKeys[0]; // This must exist if not complete
    }
    console.log(`BACKEND: Next field to query: ${nextFieldToQuery} (Required: ${askingRequired})`);

    // --- Initial Intro Message Handling (No OpenAI call for this) ---
    if (conversationHistory.length === 0) {
        const introMessage = buildIntroMessage(currentInputs, nextFieldToQuery, classification); // Pass classification
        console.log("BACKEND: First turn from assistant. Sending intro message built by `buildIntroMessage`.");
        return res.json({
            aiMessage: introMessage,
            updatedKnownInputs: currentInputs,
            fieldInFocus: nextFieldToQuery,
            isComplete: false
        });
    }

    // --- Prepare for OpenAI Call (for subsequent turns) ---
    const friendlyNameForField = ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[nextFieldToQuery];
    let classificationText = "The campaign is of a general nature.";
    if (classification && classification.primary_type) {
        classificationText = `This is specifically a "${classification.primary_type || ''}${classification.secondary_type ? ' - ' + classification.secondary_type : ''}${classification.use_case ? ' (' + classification.use_case + ')' : ''}" campaign.`;
        if (classification.primary_type.toLowerCase().includes('union') || 
            (classification.secondary_type && classification.secondary_type.toLowerCase().includes('workplace'))) {
            classificationText += " The user is likely an organiser or advocate familiar with workplace issues, possibly within a union context. Tailor your examples and phrasing accordingly, focusing on collective action, member engagement, and negotiations where appropriate.";
        }
    }

    const systemPrompt = `
You are a warm, thoughtful communications expert helping a user develop their messaging by filling out a communication brief.
${classificationText}
Your tone is calm, encouraging, and friendly. Avoid jargon. Ask one clear, open-ended question at a time.
The user may not know all answers; if they seem unsure or want to skip an optional question, gently acknowledge this and be ready to move to the next relevant field.

Current task: Ask for information about "${friendlyNameForField}".
This field is: ${askingRequired ? "Required information." : "Optional detail. If the user isn't sure, that's okay."}
We've already discussed some aspects. Your goal now is to specifically get input for "${friendlyNameForField}".
Keep your question focused on this.
`.trim();

    const messagesForAI = [
        { role: 'system', content: systemPrompt },
        ...conversationHistory // User's last message is the most recent here
    ];

    try {
        console.log(`BACKEND: Making OpenAI call. Model: gpt-4o. Field in focus: ${nextFieldToQuery}`);
        // console.log("BACKEND: Messages for AI:", JSON.stringify(messagesForAI, null, 2)); // For deep debugging
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o', // Using gpt-4o
            messages: messagesForAI,
            temperature: 0.7,
        });

        const aiResponseText = completion.choices[0].message.content;

        res.json({
            aiMessage: aiResponseText,
            updatedKnownInputs: currentInputs, // Backend doesn't parse user's current message to fill fields in this turn
            fieldInFocus: nextFieldToQuery,
            isComplete: false // Completion is handled by logic at the top of the function for the *next* turn
        });

    } catch (err) {
        console.error('❌ Messaging Chat Error:', err);
        if (err instanceof OpenAI.APIError) {
            return res.status(err.status || 500).json({ error: `OpenAI API error: ${err.name}`, details: err.message });
        }
        res.status(500).json({ error: 'Internal server error while communicating with AI.', details: err.message });
    }
    console.log("=============== /api/messaging-chat END ===============\n");
});

export default router;
