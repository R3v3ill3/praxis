// frontend/src/contexts/CampaignContext.jsx
import React, { createContext, useState, useContext } from 'react';
import { getFirestore, collection, getDocs, query, where } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const CampaignContext = createContext();

export const useCampaign = () => useContext(CampaignContext);

export const CampaignProvider = ({ children }) => {
  const [campaigns, setCampaigns] = useState([]);
  const [campaignData, setCampaignData] = useState({
    summary: null,
    classification: null,
    plan: null,
    messagingGuide: null,
    name: '',
  });

  const fetchCampaigns = async () => {
    try {
      const auth = getAuth();
      const user = auth.currentUser;
      if (!user) throw new Error('User not authenticated');

      const db = getFirestore();
      const campaignsRef = collection(db, 'campaigns');
      const q = query(campaignsRef, where('ownerId', '==', user.uid));
      const snapshot = await getDocs(q);

      const fetched = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));

      setCampaigns(fetched);
      console.log('📦 Campaigns fetched:', fetched);
    } catch (error) {
      console.error('❌ Error in fetchCampaigns:', error);
      throw error;
    }
  };

  const updateCampaignData = (newData) => {
    setCampaignData(prev => {
      const updated = { ...prev, ...newData };
      console.log('✅ Campaign Context Updated:', updated);
      return updated;
    });
  };

  const resetCampaignData = () => {
    const reset = {
      summary: null,
      classification: null,
      plan: null,
      messagingGuide: null,
      name: '',
    };
    setCampaignData(reset);
    console.log('🔄 Campaign Context Reset');
  };

  const value = {
    campaigns,
    fetchCampaigns,
    campaignData,
    updateCampaignData,
    resetCampaignData,
  };

  return (
    <CampaignContext.Provider value={value}>
      {children}
    </CampaignContext.Provider>
  );
};
