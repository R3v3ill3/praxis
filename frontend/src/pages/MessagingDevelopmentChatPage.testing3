// frontend/pages/app/campaign/MessagingDevelopmentChatPage.jsx
import React, { useState, useEffect, useContext, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import CampaignContext from '@/contexts/CampaignContext';
import { sendMessagingChatTurn } from '@/api/messaging-chat'; // <<< ACTUAL IMPORT
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'; // PascalCase
import { Textarea } from '@/components/ui/Textarea'; // PascalCase
import { Button } from '@/components/ui/Button'; // PascalCase
import { ScrollArea } from '@/components/ui/scroll-area'; // PascalCase (assuming it's a custom component)
import { useToast } from '@/components/ui/use-toast';

export default function MessagingDevelopmentChatPage() {
  const {
    campaignId,
    summary,
    classification,
    goals,
    initialMessagingInputs,
  } = useContext(CampaignContext);

  const navigate = useNavigate();
  const { toast } = useToast();

  const [conversationHistory, setConversationHistory] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [knownInputs, setKnownInputs] = useState(null);
  const [currentFieldInFocus, setCurrentFieldInFocus] = useState(null);
  const [isChatComplete, setIsChatComplete] = useState(false);
  const [loading, setLoading] = useState(false);

  const initCalledRef = useRef(false);
  const [isInitializingChat, setIsInitializingChat] = useState(true);
  const [initializationStatus, setInitializationStatus] = useState('pending');

  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [conversationHistory]);

  useEffect(() => {
    if (!campaignId || !summary || !classification || !goals || !initialMessagingInputs) {
      if (campaignId && (!summary || !classification || !goals || !initialMessagingInputs)) {
         setInitializationStatus('error');
         setIsInitializingChat(false);
         toast({
            variant: "destructive",
            title: "Missing Campaign Data",
            description: "Essential campaign data is missing. Please ensure previous steps are complete.",
         });
      }
      return;
    }

    if (initCalledRef.current || knownInputs !== null) {
      setIsInitializingChat(false);
      return;
    }

    setIsInitializingChat(true);
    initCalledRef.current = true;

    // Deep copy initialMessagingInputs to prevent direct mutation of context state
    const prefilledInputs = JSON.parse(JSON.stringify(initialMessagingInputs));
    if (summary) {
      prefilledInputs.issueName = summary.purpose || prefilledInputs.issueName;
      prefilledInputs.geographicContext = summary.location || prefilledInputs.geographicContext;
      prefilledInputs.primaryAudience = summary.audience || prefilledInputs.primaryAudience;
      prefilledInputs.campaignObjective = summary.intent || prefilledInputs.campaignObjective;
    }
    if (goals && goals.length > 0) {
      prefilledInputs.desiredOutcome = goals.map(g => g.label).join('; ') || prefilledInputs.desiredOutcome;
      // Ensure proposedChange is also pre-filled if available from summary or goals
      prefilledInputs.proposedChange = summary.proposedChange || (goals[0] && goals[0].label) || prefilledInputs.proposedChange;
    }
    setKnownInputs(prefilledInputs);
    console.log("Live API: Initial knownInputs set:", prefilledInputs); //
    console.log("Live API: Classification to be sent:", classification); //
    // Call API with the correctly prepared initial state
    handleApiCall('', [], prefilledInputs, classification, true);

  }, [campaignId, summary, classification, goals, initialMessagingInputs, knownInputs, toast]); //

  const handleApiCall = async (userMessage = '', currentHistory, currentKnownInputs, currentClassification, isInitialCall = false) => { //
    if (!campaignId || !currentClassification || !currentKnownInputs) { //
      toast({ variant: "destructive", title: "Error", description: "Cannot make API call: Campaign ID, classification, or inputs are missing." }); //
      if (isInitialCall) { setIsInitializingChat(false); setInitializationStatus('error'); } //
      return;
    }

    setLoading(true); //
    let newHistory = [...currentHistory]; //
    if (userMessage) { //
      newHistory = [...newHistory, { role: 'user', content: userMessage }]; //
    }

    try {
      // Use the imported sendMessagingChatTurn function
      const response = await sendMessagingChatTurn({ //
        campaignId, //
        conversationHistory: newHistory, //
        knownInputs: currentKnownInputs, //
        classification: currentClassification, //
      });

      // Ensure not to add a new assistant message if the last one was an error message from the API itself
      setConversationHistory(prev => {
        const lastMessage = prev[prev.length -1];
        if (lastMessage && lastMessage.role === 'assistant' && lastMessage.content.startsWith('Error communicating with assistant:')) {
          // Replace the temporary error message with the new successful one
          return [...prev.slice(0, -1), { role: 'assistant', content: response.aiMessage }];
        }
        return [...prev, { role: 'assistant', content: response.aiMessage }];
      });

      setKnownInputs(response.updatedKnownInputs); //
      setCurrentFieldInFocus(response.fieldInFocus); //
      setIsChatComplete(response.isComplete); //

      if (isInitialCall) setInitializationStatus('success'); //

    } catch (err) {
      const errorMessage = err.message || 'Failed to get a response from the assistant.'; // Use err.message from the new API helper
      toast({ variant: "destructive", title: "Chat API Error", description: errorMessage }); //
      // Add a temporary error message to the chat history
      setConversationHistory(prevHistory => [...prevHistory, { role: 'assistant', content: `Error communicating with assistant: ${errorMessage}` }]); //
      if (isInitialCall) setInitializationStatus('error'); //
    } finally {
      setLoading(false); //
      if (isInitialCall) setIsInitializingChat(false); //
      setUserInput(''); //
    }
  };

  const handleSubmit = (e) => { //
    e.preventDefault(); //
    if (!userInput.trim() || loading || isChatComplete) return; //
    // Add user's message to history immediately for better UX
    setConversationHistory(prev => [...prev, { role: 'user', content: userInput.trim() }]);
    handleApiCall(userInput.trim(), conversationHistory, knownInputs, classification); //
  };

  // --- Conditional Rendering Logic (same as your provided code) ---
  if (isInitializingChat && initializationStatus === 'pending') { //
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card><CardHeader><CardTitle>Initializing Messaging Assistant...</CardTitle></CardHeader> {/* PascalCase */}
          <CardContent><p>Loading campaign data and preparing the chat. Please wait.</p></CardContent> {/* PascalCase */}
        </Card>
      </div>
    );
  }

  if (initializationStatus === 'error' && (!conversationHistory || conversationHistory.length === 0)) { //
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card> {/* PascalCase */}
          <CardHeader><CardTitle>Initialization Failed</CardTitle></CardHeader> {/* PascalCase */}
          <CardContent> {/* PascalCase */}
            <p className="text-red-600">Could not initialize the chat. Ensure context data is available and refresh.</p>
            <Button onClick={() => navigate(-1)} className="mt-4">Go Back</Button> {/* PascalCase */}
          </CardContent>
        </Card>
      </div>
    );
  }

   if (!campaignId || (initializationStatus !== 'success' && !knownInputs && !isInitializingChat) ) { //
    return (
      <div className="p-6 max-w-xl mx-auto">
        <Card> {/* PascalCase */}
          <CardHeader><CardTitle>Error Loading Chat Data</CardTitle></CardHeader> {/* PascalCase */}
          <CardContent> {/* PascalCase */}
            <p>Critical campaign data for the chat is missing or failed to initialize. Please try returning to the dashboard.</p>
            <Button onClick={() => navigate('/app/dashboard')} className="mt-4">Go to Dashboard</Button> {/* PascalCase */}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container py-8 flex flex-col h-[calc(100vh-150px)] max-h-[800px]">
      <Card className="max-w-3xl mx-auto flex flex-col flex-grow w-full"> {/* PascalCase */}
        <CardHeader> {/* PascalCase */}
          <CardTitle>Develop Messaging Guide - Step 1: AI Chat</CardTitle> {/* PascalCase */}
          <p className="text-sm text-muted-foreground">
            Let's chat to gather the key details for your messaging.
            {currentFieldInFocus && !isChatComplete && ( //
              <span className="block text-xs font-semibold text-blue-600 mt-1">Focusing on: {currentFieldInFocus}</span> //
            )}
          </p>
        </CardHeader>
        <ScrollArea className="flex-grow p-4"> {/* PascalCase */}
          <CardContent className="space-y-4"> {/* PascalCase */}
            {conversationHistory.map((msg, idx) => ( //
              <Card key={idx} className={`max-w-[85%] ${msg.role === 'user' ? 'ml-auto bg-primary text-primary-foreground' : 'mr-auto bg-muted'}`}> {/* PascalCase */}
                <CardContent className="p-3"> {/* PascalCase */}
                  <p className="text-sm whitespace-pre-wrap">{msg.content}</p> {/* */}
                </CardContent>
              </Card>
            ))}
            <div ref={messagesEndRef} /> {/* */}
          </CardContent>
        </ScrollArea>

        {!isChatComplete && ( //
          <div className="p-4 border-t">
            <form onSubmit={handleSubmit} className="flex items-center gap-2"> {/* */}
              <Textarea //
                value={userInput} //
                onChange={(e) => setUserInput(e.target.value)} //
                placeholder={loading ? "Assistant is thinking..." : "Type your reply..."} //
                rows={2} //
                className="flex-grow resize-none" //
                disabled={loading || isChatComplete} //
                onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSubmit(e); } }} //
              />
              <Button type="submit" disabled={loading || !userInput.trim() || isChatComplete}> {/* PascalCase */}
                {loading ? 'Sending...' : 'Send'}
              </Button>
            </form>
          </div>
        )}

        {isChatComplete && ( //
          <div className="p-4 text-center border-t">
            <p className="text-green-600 font-semibold">✅ All necessary information has been collected!</p>
            <p className="text-sm text-muted-foreground mt-1">You can now proceed to generate your messaging guide.</p>
            <Button onClick={() => navigate(`/app/campaign/${campaignId}/messaging-guide`)} className="mt-4"> {/* PascalCase */}
              Generate Messaging Guide
            </Button>
          </div>
        )}
      </Card>
    </div>
  );
}
