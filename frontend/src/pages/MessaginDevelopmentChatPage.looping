// frontend/src/pages/MessagingDevelopmentChatPage.jsx
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useCampaign } from '../contexts/CampaignContext';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Input } from '../components/ui/Input';
import { ScrollArea } from '../components/ui/scroll-area'; // For chat messages
import { useToast } from '../components/ui/use-toast';
import { useNavigate } from 'react-router-dom';
import { SendHorizonal } from 'lucide-react'; // Icon for send button

// API function to call the backend
// You might want to move this to a dedicated api.js file if you have more chat-like interactions
async function sendMessagingChatMessage(payload) {
  const response = await fetch('/api/messaging-chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  });
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Network response was not ok' }));
    throw new Error(errorData.error || `Server error: ${response.status}`);
  }
  return response.json();
}

const MessagingDevelopmentChatPage = () => {
  const {
    campaignId,
    summary,
    goals,
    messagingInputs,
    initialMessagingInputs: contextInitialMessagingInputs, // Renamed to avoid conflict
    updateMessagingInputs,
  } = useCampaign();
  const navigate = useNavigate();
  const { toast } = useToast();

  const [conversation, setConversation] = useState([]); // Stores { role: 'user' | 'assistant', content: string }
  const [currentUserMessage, setCurrentUserMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [currentFieldInFocus, setCurrentFieldInFocus] = useState(null);

  const chatContainerRef = useRef(null); // For scrolling to bottom

  // Scroll to bottom of chat
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [conversation]);

  // Initial population of messagingInputs and first AI message
  const initializeChat = useCallback(async () => {
    if (!campaignId) return;
    setIsLoading(true);

    let currentKnownInputs = messagingInputs;

    if (!currentKnownInputs) {
      console.log("MessagingDevelopmentChatPage: Initializing messagingInputs in context from scratch.");
      const initialDataFromCampaign = { ...contextInitialMessagingInputs };
      if (summary) {
        initialDataFromCampaign.issueName = summary.purpose || initialDataFromCampaign.issueName;
        initialDataFromCampaign.primaryAudience = summary.audience || initialDataFromCampaign.primaryAudience;
      }
      if (goals && goals.length > 0) {
        initialDataFromCampaign.desiredOutcome = goals.sort((a, b) => a.rank - b.rank).map(g => g.label).join('; ') || initialDataFromCampaign.desiredOutcome;
      }
      updateMessagingInputs(initialDataFromCampaign); // Update context
      currentKnownInputs = initialDataFromCampaign; // Use for first API call
    } else {
      console.log("MessagingDevelopmentChatPage: Using existing messagingInputs from context.");
    }
    
    // Prepare for the first API call to get the AI's first question
    const payload = {
      campaignId,
      conversationHistory: [], // Start with an empty history for the AI's first turn
      currentUserMessage: '', // No user message yet
      knownInputs: currentKnownInputs,
    };

    try {
      console.log("Initializing chat, sending to /api/messaging-chat:", payload);
      const response = await sendMessagingChatMessage(payload);
      console.log("Initial response from /api/messaging-chat:", response);

      if (response.aiMessage) {
        setConversation([{ role: 'assistant', content: response.aiMessage }]);
      }
      if (response.updatedKnownInputs) {
        updateMessagingInputs(response.updatedKnownInputs);
      }
      setCurrentFieldInFocus(response.fieldInFocus || null);
      setIsComplete(response.isComplete || false);

    } catch (error) {
      console.error("Error initializing chat:", error);
      toast({
        variant: "destructive",
        title: "Error initializing chat",
        description: error.message,
      });
      // Add a system error message to the chat
      setConversation([{ role: 'assistant', content: "Sorry, I couldn't start our conversation due to an error. Please try refreshing." }]);
    } finally {
      setIsLoading(false);
    }
  }, [campaignId, summary, goals, messagingInputs, contextInitialMessagingInputs, updateMessagingInputs, toast]);

  useEffect(() => {
    initializeChat();
  }, [initializeChat]); // Runs once on mount and if initializeChat dependencies change (which they shouldn't after first load)


  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!currentUserMessage.trim() || isLoading || isComplete) return;

    const newUserMessage = { role: 'user', content: currentUserMessage.trim() };
    const newConversation = [...conversation, newUserMessage];
    setConversation(newConversation);
    setCurrentUserMessage('');
    setIsLoading(true);

    const payload = {
      campaignId,
      conversationHistory: newConversation, // Send the full updated history
      // currentUserMessage is part of the history now, so not needed as a separate field if backend processes history correctly
      knownInputs: messagingInputs || contextInitialMessagingInputs, // Send current state of known inputs
    };

    try {
      console.log("Sending message to /api/messaging-chat:", payload);
      const response = await sendMessagingChatMessage(payload);
      console.log("Response from /api/messaging-chat:", response);

      if (response.aiMessage) {
        setConversation(prev => [...prev, { role: 'assistant', content: response.aiMessage }]);
      }
      if (response.updatedKnownInputs) {
        updateMessagingInputs(response.updatedKnownInputs); // Update context
      }
      setCurrentFieldInFocus(response.fieldInFocus || null);
      setIsComplete(response.isComplete || false);

      if (response.isComplete) {
        toast({
          title: "Information Complete!",
          description: "We've gathered all the necessary details for the messaging guide.",
        });
      }

    } catch (error) {
      console.error("Error sending message:", error);
      toast({
        variant: "destructive",
        title: "Chat Error",
        description: error.message,
      });
      setConversation(prev => [...prev, { role: 'assistant', content: `Sorry, I encountered an issue. ${error.message}` }]);
    } finally {
      setIsLoading(false);
    }
  };

  if (!campaignId) {
    return (
      <div className="p-6 max-w-xl mx-auto text-center">
        <Card>
          <CardHeader><CardTitle>Error</CardTitle></CardHeader>
          <CardContent>
            <p>No active campaign found. Please start a new campaign.</p>
            <Button onClick={() => navigate('/app/campaign/new')} className="mt-4">Start New Campaign</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-6 max-w-3xl mx-auto flex flex-col h-[calc(100vh-100px)]"> {/* Adjust height as needed */}
      <Card className="flex-grow flex flex-col">
        <CardHeader>
          <CardTitle className="text-2xl">Develop Messaging (AI Chat)</CardTitle>
          <CardDescription>
            Let's gather the info for your messaging guide. Campaign ID: {campaignId}
            {currentFieldInFocus && !isComplete && <span className="block text-sm text-blue-600">I'm currently asking about: {currentFieldInFocus.replace("audienceProfile.", "Audience ").replace("deliveryContext.", "Delivery ")}</span>}
          </CardDescription>
        </CardHeader>
        <CardContent className="flex-grow flex flex-col overflow-hidden">
          <ScrollArea className="flex-grow mb-4 pr-4" ref={chatContainerRef}>
            {conversation.map((msg, index) => (
              <div key={index} className={`mb-3 p-3 rounded-lg max-w-[85%] ${
                msg.role === 'user' ? 'bg-blue-500 text-white ml-auto' : 'bg-gray-200 text-gray-800 mr-auto'
              }`}>
                <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
              </div>
            ))}
            {isLoading && conversation.length > 0 && ( // Show typing indicator only if there's a conversation and not initial load
              <div className="mb-3 p-3 rounded-lg max-w-[85%] bg-gray-200 text-gray-800 mr-auto">
                <p className="text-sm italic">Assistant is typing...</p>
              </div>
            )}
          </ScrollArea>

          {isComplete ? (
            <div className="text-center p-4 border-t">
              <p className="text-green-600 font-semibold mb-3">All information has been collected!</p>
              <Button onClick={() => navigate('/app/campaign/message')}>
                Proceed to Generate Messaging Guide
              </Button>
            </div>
          ) : (
            <form onSubmit={handleSendMessage} className="flex items-center gap-2 border-t pt-4">
              <Input
                type="text"
                placeholder="Your response..."
                value={currentUserMessage}
                onChange={(e) => setCurrentUserMessage(e.target.value)}
                disabled={isLoading || isComplete}
                className="flex-grow"
              />
              <Button type="submit" disabled={isLoading || isComplete || !currentUserMessage.trim()} size="icon">
                <SendHorizonal className="h-5 w-5" />
              </Button>
            </form>
          )}
        </CardContent>
      </Card>
      {/* For debugging, you can keep this or remove it */}
      {/* <Card className="mt-4">
        <CardHeader><CardTitle className="text-sm">Debug: Current Messaging Inputs</CardTitle></CardHeader>
        <CardContent>
          <pre className="text-xs bg-gray-100 p-2 rounded overflow-x-auto h-40">
            {JSON.stringify(messagingInputs || contextInitialMessagingInputs, null, 2)}
          </pre>
        </CardContent>
      </Card> */}
    </div>
  );
};

export default MessagingDevelopmentChatPage;
