// frontend/pages/app/campaign/MessagingDevelopmentChatPage.jsx
import React, { useState, useEffect, useContext, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import CampaignContext from '@/contexts/CampaignContext'; // Corrected default import
// import { sendMessagingChatTurn } from '@/api/messaging-chat'; // UNCOMMENT THIS WHEN YOUR ACTUAL API HELPER IS READY

// --- MOCK API CALL (Remove or comment out when you have your actual API helper) ---
async function sendMessagingChatTurn({ campaignId, conversationHistory, knownInputs, classification }) {
  console.log("MOCK sendMessagingChatTurn called with:", { campaignId, conversationHistory, knownInputs, classification });
  await new Promise(resolve => setTimeout(resolve, 1000));
  if (conversationHistory.length === 0 && knownInputs?.issueName) {
    return {
      aiMessage: `ðŸ‘‹ Let's work on your messaging strategy for "${knownInputs.issueName}". I see this is a "${classification?.primary_type || 'general'}" campaign. First, can you tell me more about the specific change or solution your campaign is proposing?`,
      updatedKnownInputs: knownInputs,
      fieldInFocus: "proposedChange",
      isComplete: false,
    };
  }
  return {
    aiMessage: "That's helpful! Now, could you describe the primary audience you want to reach?",
    updatedKnownInputs: { ...knownInputs, proposedChange: conversationHistory.find(m => m.role === 'user')?.content || "User provided change" },
    fieldInFocus: "primaryAudience",
    isComplete: false,
  };
}
// --- END MOCK API CALL ---

export default function MessagingDevelopmentChatPage() {
  const {
    campaignId,
    summary,
    classification,
    goals,
    initialMessagingInputs,
    // updateMessagingInputs, // Available if needed
  } = useContext(CampaignContext);

  const navigate = useNavigate();
  const { toast } = useToast();

  const [conversationHistory, setConversationHistory] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [knownInputs, setKnownInputs] = useState(null);
  const [currentFieldInFocus, setCurrentFieldInFocus] = useState(null);
  const [isChatComplete, setIsChatComplete] = useState(false); // RESTORED
  const [loading, setLoading] = useState(false); // RESTORED

  const initCalledRef = useRef(false);
  const [isInitializingChat, setIsInitializingChat] = useState(true);
  const [initializationStatus, setInitializationStatus] = useState('pending');

  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [conversationHistory]);

  useEffect(() => {
    if (!campaignId || !summary || !classification || !goals || !initialMessagingInputs) {
      if (campaignId && (!summary || !classification || !goals)) {
         setInitializationStatus('error');
         setIsInitializingChat(false);
         toast({
            variant: "destructive",
            title: "Missing Campaign Data",
            description: "Essential campaign summary, classification, or goals are missing.",
         });
      }
      return;
    }

    if (initCalledRef.current || knownInputs !== null) {
      setIsInitializingChat(false);
      return;
    }

    setIsInitializingChat(true);
    initCalledRef.current = true;

    const prefilledInputs = JSON.parse(JSON.stringify(initialMessagingInputs));
    if (summary) {
      prefilledInputs.issueName = summary.purpose || prefilledInputs.issueName;
      prefilledInputs.geographicContext = summary.location || prefilledInputs.geographicContext;
      prefilledInputs.primaryAudience = summary.audience || prefilledInputs.primaryAudience;
      prefilledInputs.campaignObjective = summary.intent || prefilledInputs.campaignObjective;
    }
    if (goals && goals.length > 0) {
      prefilledInputs.desiredOutcome = goals.map(g => g.label).join('; ') || prefilledInputs.desiredOutcome;
      prefilledInputs.proposedChange = summary.proposedChange || goals[0]?.label || prefilledInputs.proposedChange;
    }
    setKnownInputs(prefilledInputs);
    handleApiCall('', [], prefilledInputs, classification, true);

  }, [campaignId, summary, classification, goals, initialMessagingInputs, knownInputs, toast]);

  const handleApiCall = async (userMessage = '', currentHistory, currentKnownInputs, currentClassification, isInitialCall = false) => {
    if (!campaignId) {
      toast({ variant: "destructive", title: "Error", description: "Campaign ID is missing." });
      if (isInitialCall) { setIsInitializingChat(false); setInitializationStatus('error'); }
      return;
    }
    if (!currentClassification) {
        toast({ variant: "destructive", title: "Error", description: "Campaign classification is missing." });
        if (isInitialCall) { setIsInitializingChat(false); setInitializationStatus('error'); }
        return;
    }

    setLoading(true); // RESTORED/ENSURED
    let newHistory = [...currentHistory];
    if (userMessage) {
      newHistory = [...newHistory, { role: 'user', content: userMessage }];
    }

    try {
      const response = await sendMessagingChatTurn({ // This will use the MOCK function for now
        campaignId,
        conversationHistory: newHistory,
        knownInputs: currentKnownInputs,
        classification: currentClassification,
      });

      setConversationHistory(prev => [...prev.filter(m => m.role !== 'error-temp'), { role: 'assistant', content: response.aiMessage }]);
      setKnownInputs(response.updatedKnownInputs);
      setCurrentFieldInFocus(response.fieldInFocus);
      setIsChatComplete(response.isComplete); // RESTORED/ENSURED

      if (isInitialCall) setInitializationStatus('success');
    } catch (err) {
      const errorMessage = err.details || err.message || 'Failed to get a response.';
      toast({ variant: "destructive", title: "Chat Error", description: errorMessage });
      setConversationHistory(prevHistory => [...prevHistory, { role: 'assistant', content: `Error: ${errorMessage}`, role: 'error-temp' }]);
      if (isInitialCall) setInitializationStatus('error');
    } finally {
      setLoading(false); // RESTORED/ENSURED
      if (isInitialCall) setIsInitializingChat(false);
      setUserInput('');
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!userInput.trim() || loading || isChatComplete) return;
    handleApiCall(userInput.trim(), conversationHistory, knownInputs, classification);
  };

  if (isInitializingChat && initializationStatus === 'pending') {
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card><CardHeader><CardTitle>Initializing Messaging Assistant...</CardTitle></CardHeader>
          <CardContent><p>Loading campaign data and preparing the chat. Please wait.</p></CardContent>
        </Card>
      </div>
    );
  }

  if (initializationStatus === 'error' && conversationHistory.length === 0) {
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card>
          <CardHeader><CardTitle>Initialization Failed</CardTitle></CardHeader>
          <CardContent>
            <p className="text-red-600">Could not initialize the chat. Please ensure all previous campaign steps are complete and try again.</p>
            <Button onClick={() => navigate(-1)} className="mt-4">Go Back</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!campaignId || !knownInputs) {
    return (
      <div className="p-6 max-w-xl mx-auto">
        <Card>
          <CardHeader><CardTitle>Error</CardTitle></CardHeader>
          <CardContent>
            <p>Critical campaign data for the chat is missing. Please try re-initializing the campaign step.</p>
            <Button onClick={() => navigate('/app/campaign/new')} className="mt-4">Start New Campaign</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container py-8 flex flex-col h-[calc(100vh-150px)] max-h-[800px]">
      <Card className="max-w-3xl mx-auto flex flex-col flex-grow w-full">
        <CardHeader>
          <CardTitle>Develop Messaging Guide - Step 1: AI Chat</CardTitle>
          <p className="text-sm text-muted-foreground">
            Let's chat to gather the key details for your messaging.
            {currentFieldInFocus && !isChatComplete && (
              <span className="block text-xs font-semibold text-blue-600 mt-1">Focusing on: {currentFieldInFocus}</span>
            )}
          </p>
        </CardHeader>
        <ScrollArea className="flex-grow p-4">
          <CardContent className="space-y-4">
            {conversationHistory.map((msg, idx) => (
              <Card key={idx} className={`max-w-[85%] ${msg.role === 'user' ? 'ml-auto bg-primary text-primary-foreground' : 'mr-auto bg-muted'}`}>
                <CardContent className="p-3">
                  <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                </CardContent>
              </Card>
            ))}
            <div ref={messagesEndRef} />
          </CardContent>
        </ScrollArea>

        {!isChatComplete && (
          <div className="p-4 border-t">
            <form onSubmit={handleSubmit} className="flex items-center gap-2">
              <Textarea
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                placeholder={loading ? "Assistant is thinking..." : "Type your reply..."} // Corrected
                rows={2}
                className="flex-grow resize-none"
                disabled={loading || isChatComplete} // Corrected
                onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSubmit(e); } }}
              />
              <Button type="submit" disabled={loading || !userInput.trim() || isChatComplete}> {/* Corrected */}
                {loading ? 'Sending...' : 'Send'} {/* Corrected */}
              </Button>
            </form>
          </div>
        )}

        {isChatComplete && (
          <div className="p-4 text-center border-t">
            <p className="text-green-600 font-semibold">âœ… All necessary information has been collected!</p>
            <p className="text-sm text-muted-foreground mt-1">You can now proceed to generate your messaging guide.</p>
            <Button onClick={() => navigate(`/app/campaign/${campaignId}/messaging-guide`)} className="mt-4">
              Generate Messaging Guide
            </Button>
          </div>
        )}
      </Card>
    </div>
  );
}
