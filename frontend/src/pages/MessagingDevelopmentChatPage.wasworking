// frontend/pages/app/campaign/MessagingDevelopmentChatPage.jsx
import React, { useState, useEffect, useContext, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import CampaignContext from '@/contexts/CampaignContext';
import { sendMessagingChatTurn } from '@/api/messaging-chat';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Textarea } from '@/components/ui/Textarea';
import { Button } from '@/components/ui/Button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/components/ui/use-toast';

// Define the constant needed for display purposes
const ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES = {
    "issueName": "The core issue or problem your campaign addresses",
    "geographicContext": "The specific location or community context of your campaign",
    "proposedChange": "The specific change or solution your campaign is proposing",
    "primaryAudience": "The main group of people you want to reach and persuade with your messaging",
    "desiredOutcome": "The ultimate overall outcome or impact you hope to achieve with the campaign",
    "campaignObjective": "A more specific objective for this particular messaging effort",
    "audienceProfile.demographics": "Key demographics of your primary audience",
    "audienceProfile.psychographics": "Common values, attitudes, or lifestyles of your audience",
    "audienceProfile.priorBeliefs": "What your audience likely already thinks about the issue",
    "audienceProfile.mediaHabits": "How your audience typically gets information",
    "deliveryContext.format": "Planned message formats (e.g., social media, flyers)",
    "deliveryContext.messenger": "Who would be best to deliver these messages",
    "deliveryContext.timing": "Any specific timing considerations for message delivery",
    "knownComparisons": "Similar campaigns or messaging efforts you're aware of",
    "benchmarkData": "Existing data related to audience awareness or attitudes"
};

export default function MessagingDevelopmentChatPage() {
  const {
    campaignId,
    summary,
    classification,
    goals,
    initialMessagingInputs,
    messagingInputs: contextMessagingInputs, // Current state of messagingInputs in context
    updateMessagingInputs, // Function to update messagingInputs in context
    saveCurrentCampaignState, // Function to save all campaign data
  } = useContext(CampaignContext);

  const navigate = useNavigate();
  const { toast } = useToast();

  const [conversationHistory, setConversationHistory] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [knownInputs, setKnownInputs] = useState(null);
  const [currentFieldInFocus, setCurrentFieldInFocus] = useState(null);
  const [isChatComplete, setIsChatComplete] = useState(false);
  const [loading, setLoading] = useState(false);

  const initCalledRef = useRef(false);
  const [isInitializingChat, setIsInitializingChat] = useState(true);
  const [initializationStatus, setInitializationStatus] = useState('pending');

  const messagesEndRef = useRef(null);
  const didSaveFinalDataRef = useRef(false); // <<< ADD THIS REF TO PREVENT SAVE LOOP

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [conversationHistory]);

  useEffect(() => {
    if (!campaignId || !summary || !classification || !goals || !initialMessagingInputs ) {
      if (campaignId && (!summary || !classification || !goals || !initialMessagingInputs)) {
         setInitializationStatus('error');
         setIsInitializingChat(false);
         toast({
            variant: "destructive",
            title: "Missing Campaign Data",
            description: "Essential campaign data is missing. Please ensure previous steps are complete.",
         });
         console.error("ChatPage Init: Missing essential campaign context data", { campaignId, summary, classification, goals, initialMessagingInputs });
      }
      return;
    }

    if (initCalledRef.current || knownInputs !== null) {
      setIsInitializingChat(false);
      return;
    }

    setIsInitializingChat(true);
    initCalledRef.current = true;
    didSaveFinalDataRef.current = false; // Reset save flag on re-initialization

    let prefilledData = contextMessagingInputs && Object.keys(contextMessagingInputs).length > 0 && contextMessagingInputs.issueName !== undefined
                       ? JSON.parse(JSON.stringify(contextMessagingInputs))
                       : JSON.parse(JSON.stringify(initialMessagingInputs));

    console.log("ChatPage Init: Starting prefill with base:", JSON.parse(JSON.stringify(prefilledData)));

    if (summary) {
      prefilledData.issueName = prefilledData.issueName || summary.purpose || '';
      prefilledData.geographicContext = prefilledData.geographicContext || summary.location || '';
      prefilledData.primaryAudience = prefilledData.primaryAudience || summary.audience || '';
      prefilledData.campaignObjective = prefilledData.campaignObjective || summary.intent || '';
      prefilledData.proposedChange = prefilledData.proposedChange || summary.proposedChange || '';
    }
    if (goals && goals.length > 0) {
      prefilledData.desiredOutcome = prefilledData.desiredOutcome || goals.map(g => g.label).join('; ') || '';
      prefilledData.proposedChange = prefilledData.proposedChange || (goals[0] && goals[0].label) || '';
    }

    setKnownInputs(prefilledData);
    console.log("ChatPage Init: Initial knownInputs for chat (after prefill):", JSON.parse(JSON.stringify(prefilledData)));
    console.log("ChatPage Init: Classification to be sent:", classification);

    handleApiCall('', [], prefilledData, classification, true);

  }, [campaignId, summary, classification, goals, initialMessagingInputs, contextMessagingInputs, toast]); // Removed knownInputs from here to avoid loop on setKnownInputs


  const handleApiCall = async (userMessage = '', currentHistory, currentLocalKnownInputs, currentClassification, isInitialCall = false) => {
    if (!campaignId || !currentClassification || !currentLocalKnownInputs) {
      toast({ variant: "destructive", title: "Error", description: "Cannot make API call: Campaign ID, classification, or inputs are missing." });
      if (isInitialCall) { setIsInitializingChat(false); setInitializationStatus('error'); }
      setLoading(false);
      return;
    }

    setLoading(true);
    let newHistory = [...currentHistory];
    // Removed: if (userMessage && !isInitialCall) because currentHistory already includes the latest user message from handleSubmit
    // newHistory = [...newHistory, { role: 'user', content: userMessage }];

    try {
      console.log("ChatPage: Sending to API - knownInputs:", JSON.parse(JSON.stringify(currentLocalKnownInputs)));
      const response = await sendMessagingChatTurn({
        campaignId,
        conversationHistory: newHistory,
        knownInputs: currentLocalKnownInputs,
        classification: currentClassification,
      });
      console.log("ChatPage: Received from API:", response);

      setConversationHistory(prev => { // Use functional update for history based on the newHistory sent
          const updatedHistory = [...prev];
          // Ensure the assistant message isn't duplicated if already present from an error fallback
          const lastMessage = updatedHistory[updatedHistory.length -1];
          if(lastMessage && lastMessage.role === 'assistant' && lastMessage.content.startsWith('Error communicating')) {
            updatedHistory.pop(); // Remove temp error
          }
          updatedHistory.push({ role: 'assistant', content: response.aiMessage });
          return updatedHistory;
      });

      setKnownInputs(response.updatedKnownInputs);
      setCurrentFieldInFocus(response.fieldInFocus);

      if (isInitialCall) {
        setInitializationStatus('success');
      }
      // Set isChatComplete based on the latest API response
      if (response.isComplete) {
        setIsChatComplete(true);
      }

    } catch (err) {
      const errorMessage = err.message || 'Failed to get a response from the assistant.';
      toast({ variant: "destructive", title: "Chat API Error", description: errorMessage });
      setConversationHistory(prevHistory => [...prevHistory, { role: 'assistant', content: `Error communicating with assistant: ${errorMessage}` }]);
      if (isInitialCall) setInitializationStatus('error');
    } finally {
      setLoading(false);
      if (isInitialCall) setIsInitializingChat(false);
      setUserInput('');
    }
  };

  // Effect to handle saving when chat is complete
  useEffect(() => {
    // Only run if chat is complete, knownInputs are available, AND we haven't saved yet.
    if (isChatComplete && knownInputs && !didSaveFinalDataRef.current) {
      didSaveFinalDataRef.current = true; // Set the flag immediately to prevent re-runs

      console.log("ChatPage: Chat complete! Attempting final save. Final local knownInputs:", JSON.parse(JSON.stringify(knownInputs)));
      updateMessagingInputs(knownInputs); // Update the CampaignContext with the final inputs

      const saveFinalData = async () => {
        if (!campaignId || !summary || !classification || !goals) {
            toast({ variant: "destructive", title: "Save Error", description: "Core campaign data missing, cannot save final messaging inputs." });
            console.error("ChatPage Save Error: Core context data missing for final save.", {campaignId, summary, classification, goals});
            // Reset flag if save fails due to missing core data, allowing another attempt if data arrives
            didSaveFinalDataRef.current = false;
            return;
        }
        console.log("ChatPage: Calling saveCurrentCampaignState from context...");
        const dataToSave = { // Construct the payload for saveCurrentCampaignState
            campaignId,
            summary,
            classification,
            goals,
            messaging_inputs: knownInputs // Pass the final collected knownInputs
        };
        const savedId = await saveCurrentCampaignState("Messaging Chat Completed", dataToSave);
        if (!savedId) {
            // If save failed, reset the flag to allow another attempt if appropriate
            // (e.g., if the user fixes something and re-triggers completion, though unlikely here)
             didSaveFinalDataRef.current = false;
        }
      };

      saveFinalData();
    }
    // Dependencies should include everything read inside the effect.
    // The didSaveFinalDataRef.current check guards the execution.
  }, [isChatComplete, knownInputs, updateMessagingInputs, saveCurrentCampaignState, campaignId, summary, classification, goals, toast]);


  const handleSubmit = (e) => {
    e.preventDefault();
    if (!userInput.trim() || loading || isChatComplete) return;

    const currentMessage = { role: 'user', content: userInput.trim() };
    // Update conversation history immediately for responsive UI
    setConversationHistory(prev => [...prev, currentMessage]);
    // Pass the updated history (including the new user message) to handleApiCall
    handleApiCall(userInput.trim(), [...conversationHistory, currentMessage], knownInputs, classification);
  };

  // --- Conditional Rendering Logic (same as before) ---
  if (isInitializingChat && initializationStatus === 'pending') {
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card><CardHeader><CardTitle>Initializing Messaging Assistant...</CardTitle></CardHeader>
          <CardContent><p>Loading campaign data and preparing the chat. Please wait.</p></CardContent>
        </Card>
      </div>
    );
  }

  if (initializationStatus === 'error' && (!conversationHistory || conversationHistory.length === 0)) {
    return (
      <div className="container py-8 max-w-3xl mx-auto text-center">
        <Card>
          <CardHeader><CardTitle>Initialization Failed</CardTitle></CardHeader>
          <CardContent>
            <p className="text-red-600">Could not initialize the chat. Essential campaign data might be missing or an error occurred. Please ensure previous steps are complete and try refreshing.</p>
            <Button onClick={() => navigate(-1)} className="mt-4">Go Back</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

   if (!campaignId || (initializationStatus !== 'success' && !knownInputs && !isInitializingChat) ) {
     console.warn("ChatPage Render: Critical data missing for chat page.", { campaignId, initializationStatus, knownInputs, isInitializingChat});
    return (
      <div className="p-6 max-w-xl mx-auto">
        <Card>
          <CardHeader><CardTitle>Error Loading Chat Data</CardTitle></CardHeader>
          <CardContent>
            <p>Critical campaign data for the chat is missing or failed to initialize. Please try returning to the dashboard or restarting the campaign setup.</p>
            <Button onClick={() => navigate('/app/dashboard')} className="mt-4">Go to Dashboard</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container py-8 flex flex-col h-[calc(100vh-150px)] max-h-[800px]">
      <Card className="max-w-3xl mx-auto flex flex-col flex-grow w-full">
        <CardHeader>
          <CardTitle>Develop Messaging Guide - AI Chat</CardTitle>
          <p className="text-sm text-muted-foreground">
            Chat with the AI to refine the key details for your messaging.
            {currentFieldInFocus && !isChatComplete && (
              <span className="block text-xs font-semibold text-blue-600 mt-1">AI is focusing on: {ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[currentFieldInFocus] || currentFieldInFocus}</span>
            )}
          </p>
        </CardHeader>
        <ScrollArea className="flex-grow p-4">
          <CardContent className="space-y-4">
            {conversationHistory.map((msg, idx) => (
              <Card key={idx} className={`max-w-[85%] ${msg.role === 'user' ? 'ml-auto bg-primary text-primary-foreground' : 'mr-auto bg-muted'}`}>
                <CardContent className="p-3">
                  <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                </CardContent>
              </Card>
            ))}
            <div ref={messagesEndRef} />
          </CardContent>
        </ScrollArea>

        {!isChatComplete && (
          <div className="p-4 border-t">
            <form onSubmit={handleSubmit} className="flex items-center gap-2">
              <Textarea
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                placeholder={loading ? "Assistant is thinking..." : (currentFieldInFocus ? `Your thoughts on: ${ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[currentFieldInFocus] || currentFieldInFocus}?` : "Type your reply...")}
                rows={2}
                className="flex-grow resize-none"
                disabled={loading || isChatComplete}
                onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSubmit(e); } }}
              />
              <Button type="submit" disabled={loading || !userInput.trim() || isChatComplete}>
                {loading ? 'Sending...' : 'Send'}
              </Button>
            </form>
          </div>
        )}

        {isChatComplete && (
          <div className="p-4 text-center border-t">
            <p className="text-green-600 font-semibold">✅ All necessary information has been collected!</p>
            <p className="text-sm text-muted-foreground mt-1">Your messaging inputs have been saved. You can now proceed to generate your full messaging guide.</p>
            <Button onClick={() => navigate(`/app/campaign/${campaignId}/messaging-guide`)} className="mt-4">
              Generate Messaging Guide
            </Button>
          </div>
        )}
      </Card>
    </div>
  );
}
