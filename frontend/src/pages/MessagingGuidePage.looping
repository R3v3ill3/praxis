// frontend/src/pages/MessagingGuidePage.jsx
import React, { useState, useEffect, useCallback, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useCampaign } from '../contexts/CampaignContext'; // To potentially get initial data or helper functions
import { useToast } from '../components/ui/use-toast';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"; // Assuming you have an Alert component
import { ExternalLink } from 'lucide-react'; // Assuming lucide-react for icons

// Placeholder API function to fetch a single campaign's full data
async function fetchCampaignDataById(campaignId) {
  // In a real app, this would hit your backend: GET /api/campaigns/${campaignId}
  console.log(`API Call (Placeholder): Fetching full campaign data for ID: ${campaignId}`);
  // MOCK RESPONSE (Simulating localStorage or fallback)
  if (localStorage.getItem(`campaign-${campaignId}`)) {
    try {
      return JSON.parse(localStorage.getItem(`campaign-${campaignId}`));
    } catch(e) {
      console.error("Error parsing campaign data from localStorage", e);
    }
  }
  console.warn("Using fallback mock campaign data in fetchCampaignDataById. Implement actual API call.");
  return {
    id: campaignId,
    summary: { purpose: "Mock Summary Purpose", location: "Mock Location", audience: "Mock Audience", intent: "Mock Intent", target: "Mock Target", problem: "Mock Problem", proposedChange: "Mock Proposed Change"},
    classification: { primary_type: "Mock Type", secondary_type: "Mock Subtype", use_case: "Mock Use Case"},
    goals: [{id: "g1", label: "Mock Goal 1", rank: 1}],
    messaging_inputs: {
      issueName: 'Mock Issue from fetched data',
      proposedChange: 'Mock Proposed Change from fetched data',
      geographicContext: 'Mock Geo Context from fetched data',
      desiredOutcome: 'Mock Desired Outcome from fetched data',
      primaryAudience: 'Mock Primary Audience from fetched data',
      audienceProfile: {
        demographics: 'Mock Demographics',
        psychographics: 'Mock Psychographics',
        priorBeliefs: 'Mock Prior Beliefs',
        mediaHabits: 'Mock Media Habits'
      },
      campaignObjective: 'Mock Campaign Objective from fetched data',
      deliveryContext: {
        format: 'Mock Format',
        messenger: 'Mock Messenger',
        timing: 'Mock Timing'
      },
      knownComparisons: 'Mock Known Comparisons',
      benchmarkData: 'Mock Benchmark Data'
    }
  };
}

// Placeholder API function to generate the messaging guide
async function generateMessagingGuideApi(campaignDetails) {
  console.log("API Call: Generating messaging guide with details:", campaignDetails);
  const response = await fetch('/api/messaging-guide', { // This is your messaging-guide2.js endpoint
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(campaignDetails), // Send all necessary fields
  });
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Failed to generate messaging guide. Server returned non-JSON response.' }));
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }
  return response.json(); // Expects { messagingGuide: "..." }
}


export default function MessagingGuidePage() {
  const { campaignId } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  // const campaignCtx = useCampaign(); // Context can be used if needed for other global state

  const [campaignData, setCampaignData] = useState(null);
  const [messagingGuide, setMessagingGuide] = useState('');
  const [isLoading, setIsLoading] = useState(true); // Unified loading state
  const [error, setError] = useState(null);

  // Memoize the core data loading and guide generation logic
  const loadDataAndGenerateGuide = useCallback(async () => {
    if (!campaignId) {
      setError("Campaign ID is missing from URL.");
      setIsLoading(false);
      toast({ variant: "destructive", title: "Error", description: "No Campaign ID found." });
      navigate('/app/dashboard'); // Redirect if no campaignId
      return;
    }

    console.log(`Attempting to load data and generate guide for campaign ID: ${campaignId}`);
    setIsLoading(true);
    setError(null); // Clear previous errors
    setMessagingGuide(''); // Clear previous guide content
    setCampaignData(null); // Clear previous campaign data

    try {
      // Step 1: Fetch full campaign data
      console.log(`Workspaceing full campaign data for ID: ${campaignId}`);
      const fetchedData = await fetchCampaignDataById(campaignId);
      setCampaignData(fetchedData);
      console.log("Full campaign data fetched:", fetchedData);

      if (!fetchedData || !fetchedData.messaging_inputs) {
        throw new Error("Messaging inputs are missing from the fetched campaign data. Please complete the AI chat step.");
      }

      // Step 2: Prepare payload and generate the messaging guide
      const payloadForGuide = {
        ...fetchedData.messaging_inputs,
        // Add any other top-level fields from campaignData if your messaging-guide2.js needs them
        // e.g., campaignName: fetchedData.summary?.purpose,
      };

      // Basic validation for required fields in the payload (adjust as per your backend needs)
      if (!payloadForGuide.issueName || !payloadForGuide.proposedChange || !payloadForGuide.geographicContext || !payloadForGuide.desiredOutcome || !payloadForGuide.primaryAudience || !payloadForGuide.audienceProfile) {
          console.error("Payload for guide generation is missing required fields:", payloadForGuide);
          throw new Error("Critical data for generating the guide is missing from messaging inputs. Please ensure the chat was completed fully.");
      }

      console.log("Payload being sent to /api/messaging-guide:", payloadForGuide);
      const guideResult = await generateMessagingGuideApi(payloadForGuide);
      
      if (guideResult && guideResult.messagingGuide) {
        setMessagingGuide(guideResult.messagingGuide);
        toast({ title: "Success", description: "Messaging guide generated!" });
      } else {
        // Handle cases where the API might return success but no actual guide content
        console.warn("Messaging guide generation may have succeeded but content is empty or missing.");
        setMessagingGuide(''); // Ensure it's explicitly empty
        // Optionally, inform the user with a specific toast or rely on the UI state for no guide.
        // toast({ variant: "info", title: "Notice", description: "Messaging guide generated, but no content was returned." });
      }

    } catch (err) {
      console.error("Error in MessagingGuidePage during data load or guide generation:", err);
      setError(err.message || "An unexpected error occurred.");
      toast({ variant: "destructive", title: "Error", description: err.message });
    } finally {
      setIsLoading(false); // Ensure loading state is turned off after all operations
    }
  }, [campaignId, navigate, toast]); // Dependencies for useCallback

  useEffect(() => {
    // This effect will run when `loadDataAndGenerateGuide` function reference changes.
    // `loadDataAndGenerateGuide` itself changes if `campaignId`, `Maps`, or `toast` changes.
    // Assuming `Maps` and `toast` are stable references from their respective hooks.
    loadDataAndGenerateGuide();
  }, [loadDataAndGenerateGuide]); // Effect depends on the memoized function

  // Conditional Rendering Logic

  if (isLoading) {
    return (
      <div className="container mx-auto p-6 text-center">
        <Card className="max-w-2xl mx-auto">
          <CardHeader><CardTitle>Loading & Generating Guide...</CardTitle></CardHeader>
          <CardContent><p>Please wait while we fetch campaign details and generate your messaging guide. This may take a moment.</p></CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <Alert variant="destructive" className="max-w-2xl mx-auto">
          <ExternalLink className="h-4 w-4" /> {/* Using ExternalLink as per original file */}
          <AlertTitle>Error Encountered</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
          <div className="mt-4 space-x-2">
            <Button onClick={loadDataAndGenerateGuide}> {/* Retry the whole process */}
              Retry
            </Button>
            <Button variant="outline" onClick={() => navigate(`/app/campaign/${campaignId}/develop-messaging`)}>
              Edit Messaging Inputs (Chat)
            </Button>
            <Button variant="outline" onClick={() => navigate('/app/dashboard')}>
              Go to Dashboard
            </Button>
          </div>
        </Alert>
      </div>
    );
  }

  if (!messagingGuide) {
    // This state is reached if not loading, no error, but the messagingGuide string is empty.
    return (
      <div className="container mx-auto p-6 text-center">
         <Card className="max-w-2xl mx-auto">
          <CardHeader><CardTitle>Messaging Guide</CardTitle></CardHeader>
          <CardContent>
            <p>No messaging guide content is available. This could be because the generation process didn't produce a guide, or there was an issue that resolved without producing content.</p>
            <div className="mt-4 space-x-2">
                <Button onClick={loadDataAndGenerateGuide}>
                    Try Generating Again
                </Button>
                <Button variant="outline" onClick={() => navigate(`/app/campaign/${campaignId}/develop-messaging`)}>
                    Go Back to Chat
                </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Success: Display the messaging guide
  return (
    <div className="container mx-auto p-4 md:p-6">
      <Card className="max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle className="text-2xl md:text-3xl">Your Messaging Guide</CardTitle>
          {campaignData?.summary?.purpose && (
            <CardDescription>For campaign: {campaignData.summary.purpose}</CardDescription>
          )}
        </CardHeader>
        <CardContent>
          <div className="prose prose-lg max-w-none whitespace-pre-wrap">
            {messagingGuide}
          </div>
          <div className="mt-8 text-center">
            <Button onClick={() => navigate('/app/dashboard')} variant="outline">Back to Dashboard</Button>
            {/* Add other actions like download, edit, etc. later */}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
