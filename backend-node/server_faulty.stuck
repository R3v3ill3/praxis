// server.js

console.log("--- SERVER.JS EXECUTION STARTED (TOP OF FILE) ---"); // New top-level log

// STEP 1: Import necessary modules for dotenv configuration FIRST
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

console.log("--- DOTENV AND PATH MODULES IMPORTED ---"); // New log after initial imports

// STEP 2: Configure dotenv IMMEDIATELY to load environment variables
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const envPath = path.resolve(__dirname, '.env');

console.log(`--- .env file path determined: ${envPath} ---`); // New log before dotenv.config()

const dotenvResult = dotenv.config({ path: envPath });

console.log("--- DOTENV.CONFIG() CALLED ---"); // New log immediately after dotenv.config()

if (dotenvResult.error) {
  console.error("Error loading .env file:", dotenvResult.error);
  // Decide if you want to throw an error or exit if .env is critical
  // For now, we'll just log it, but GOOGLE_APPLICATION_CREDENTIALS check will fail later if not set
} else {
  // Log if .env was parsed, even if it was empty
  if (dotenvResult.parsed) {
    console.log("--- .env file parsed successfully. Variables loaded:", Object.keys(dotenvResult.parsed));
  } else {
    console.warn("--- .env file was found and parsed, but it might be empty or only contain comments.");
  }
}

// This log will now always appear, whether there was an error or not, to show what process.env has
console.log(`GOOGLE_APPLICATION_CREDENTIALS from process.env after dotenv attempt: ${process.env.GOOGLE_APPLICATION_CREDENTIALS ? `"${process.env.GOOGLE_APPLICATION_CREDENTIALS}"` : 'NOT Loaded or Empty'}`);


// STEP 3: NOW import other modules that might depend on environment variables
console.log("--- IMPORTING OTHER MODULES (EXPRESS, ROUTES, ETC.) ---"); // New log
import express from 'express';
import cors from 'cors';
import swaggerUi from 'swagger-ui-express';
import swaggerJsdoc from 'swagger-jsdoc';
import routes from './routes/index.js'; // This will now be imported AFTER .env is loaded

// Firebase will be imported via the 'routes' module or its children.
// Its top-level code will now execute AFTER dotenv has populated process.env
console.log("--- OTHER MODULES IMPORTED ---"); // New log

const app = express();
const PORT = process.env.PORT || 4100; // Default to 4100 if not in .env or PM2 config

app.use(cors());
app.use(express.json());

const frontendDistPath = path.join(__dirname, '../frontend/dist');
app.use(express.static(frontendDistPath));

// Swagger setup - ensure this definition is correct and doesn't have syntax errors
const swaggerSpec = swaggerJsdoc({
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Digital Ad Co-Op API',
      version: '1.0.0',
    },
    servers: [
      {
        url: '/api', // tells Swagger to prepend /api to all paths
      },
    ],
  }, // Ensure comma is correct if 'apis' is the next property at this level
  apis: ['./routes/*.js'], // Path to the API docs
});
app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

app.get('/', (req, res) => {
  res.send('Digital Ad Co-Op Backend');
});

app.post('/api/test-post', (req, res) => {
  console.log(`--- ${new Date().toISOString()} /api/test-post HIT! ---`);
  res.status(200).json({ message: "POST test successful" });
});

// Routes
app.use('/api', routes);

app.get('*', (req, res) => {
  if (frontendDistPath) { // Check if path is resolved
    res.sendFile(path.join(frontendDistPath, 'index.html'), (err) => {
      if (err) {
        console.error("Error sending index.html:", err);
        res.status(500).send("Error serving frontend.");
      }
    });
  } else {
    console.error("frontendDistPath is not defined");
    res.status(404).send("Frontend not found.");
  }
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`NODE_ENV: ${process.env.NODE_ENV}`);
  if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) {
    console.warn("Warning: GOOGLE_APPLICATION_CREDENTIALS is still not set by the time listen starts.");
  } else {
    console.log("GOOGLE_APPLICATION_CREDENTIALS path seems to be set by the time listen starts.");
  }
});
