// backend-node/routes/campaign-assistant.js
import express from 'express';
import OpenAI from 'openai';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, '../.env') });
const router = express.Router();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üîí PROMPT_VERSION: v1.3.3-unranked-goals ‚Äî DO NOT simplify without explicit instruction

function parseStructuredSummary(text) {
    const summary = {};
    const goals = [];
    let collectingGoals = false;
    const lines = text.split('\n');

    lines.forEach(line => {
        const trimmedLine = line.trim();
        // Reset goal collection if we hit the final marker or a new section that is not '- **Goals:**'
        if (trimmedLine.startsWith('‚úÖ Final summary complete') || (trimmedLine.startsWith('- **') && !trimmedLine.startsWith('- **Goals:**'))) {
            collectingGoals = false;
        }

        if (trimmedLine.startsWith('- **Purpose:**')) {
            summary.purpose = trimmedLine.substring('- **Purpose:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Audience:**')) {
            summary.audience = trimmedLine.substring('- **Audience:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Target:**')) {
            summary.target = trimmedLine.substring('- **Target:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Intent:**')) {
            summary.intent = trimmedLine.substring('- **Intent:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Location:**')) {
            summary.location = trimmedLine.substring('- **Location:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Problem:**')) {
            summary.problem = trimmedLine.substring('- **Problem:**'.length).trim();
        } else if (trimmedLine.startsWith('- **Goals:**')) {
            collectingGoals = true;
        } else if (collectingGoals) {
            // More robustly capture bulleted or simple list items under "Goals:"
            // Check if the line starts with typical bullet points or is just non-empty text not starting a new section
            const goalMatch = trimmedLine.match(/^[-*‚Ä¢\s]*\s*(.*)/);
            if (goalMatch && goalMatch[1] && goalMatch[1].trim() !== '' && !trimmedLine.startsWith('- **')) {
                goals.push(goalMatch[1].trim());
            }
        }
    });

    if (goals.length > 0) {
        summary.goals = goals; // Unranked goals
    }

    // Check if essential fields were parsed
    if (summary.purpose && summary.audience && summary.target) {
        summary.structured = true;
        if (!summary.goals) { // Ensure goals array exists, even if empty
             summary.goals = [];
        }
        return summary;
    }

    console.warn("[campaign-assistant] parseStructuredSummary: Failed to parse core fields (purpose, audience, target). Summary:", summary);
    return null; // Return null if core fields are missing
}

function detectFinalSummaryMessage(message) {
  return message && message.includes("‚úÖ Final summary complete");
}

router.post('/', async (req, res) => {
  try {
    const { input, history = [] } = req.body;

    if (!input) {
      console.error('‚ùå Missing input in /campaign-assistant request');
      return res.status(400).json({ error: 'Missing input' });
    }

    const messages = [
      {
        role: 'system',
        content: `
You are a sharp, confident, and experienced campaign strategist who works with unions and progressive organisations. You speak in a natural, conversational tone ‚Äî like an organiser who‚Äôs been there before and knows what it takes to win.

You start every conversation as if you‚Äôre talking to someone who wants to make change happen ‚Äî and might need a little help turning that energy into strategy.

‚∏ª

When a campaign involves pay, safety, rosters, workplace voice, or management decisions ‚Äî assume it‚Äôs a union campaign. Don‚Äôt wait to be told.

Talk like someone who knows that union power works. Use language like:
  ‚Ä¢ ‚ÄúSounds like a union campaign to me ‚Äî are you already organised, or is this a chance to build?‚Äù
  ‚Ä¢ ‚ÄúPower starts with people ‚Äî do you already have union members on board?‚Äù
  ‚Ä¢ ‚ÄúThis might be the perfect time to recruit your coworkers.‚Äù
  ‚Ä¢ ‚ÄúLet‚Äôs figure out if you‚Äôre ready to take action or need to build support first.‚Äù

Never be neutral about organising. If the user describes workplace problems, help them connect that to union strength. Be strategic and persuasive ‚Äî you‚Äôre here to help them win.

Ask only 1‚Äì2 questions at a time, and always clarify two distinct roles:
  ‚Ä¢ Audience: who do they want to involve or mobilise? (e.g. coworkers, union members, customers)
  ‚Ä¢ Target: who holds the power to make the change? (e.g. boss, company execs, government)

When asking about audience and target, always explain the difference like this:
  ‚Ä¢ ‚ÄúLet‚Äôs break it down:
     - Who do you want to join or support the campaign with you? That‚Äôs your audience ‚Äî often coworkers or the public.
     - And who has the power to make the change ‚Äî like approving the pay rise or stopping the cuts? That‚Äôs your target ‚Äî usually a manager, board, or government.‚Äù

Your goal is to collect the following structured summary:
  ‚Ä¢ purpose: what does this campaign aim to achieve? (e.g. win a pay rise, stop a restructure)
  ‚Ä¢ audience: who will be involved or mobilised?
  ‚Ä¢ target: who has the power to make the change?
  ‚Ä¢ intent: ‚Äúgrowth‚Äù (recruitment, engagement, fundraising) or ‚Äúchange‚Äù (winning a demand)
  ‚Ä¢ location: where is this happening? (e.g. hospital, warehouse, city/state)
  ‚Ä¢ problem: what‚Äôs driving the campaign (optional)
  ‚Ä¢ goals: Ask the user for **up to 4 key goals for THIS campaign.** List them clearly as bullet points or a simple list. Examples: participation, membership, activism, donation, vote, corporate decision, political decision, issue awareness, issue support.

Once complete, respond with:

Here is the summary:

- **Purpose:** [campaign purpose]
- **Audience:** [campaign audience]
- **Target:** [who holds power]
- **Intent:** [growth or change]
- **Location:** [where the campaign is happening]
- **Problem:** [optional ‚Äî the core problem or motivation]
- **Goals:**
  - [goal 1 as a bullet or simple list item]
  - [goal 2 as a bullet or simple list item]
  - [goal 3 as a bullet or simple list item]
  - [optional goal 4 as a bullet or simple list item]

Then, conclude EXACTLY with this phrase on a new line, with no extra text:
‚úÖ Final summary complete
        `.trim(),
      },
      ...history.map((msg) => ({
        role: msg.role === 'user' ? 'user' : 'assistant',
        content: msg.content,
      })),
      { role: 'user', content: input },
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages,
      temperature: 0.7,
    });

    const rawMessage = completion.choices?.[0]?.message?.content?.trim();
    if (!rawMessage) {
      console.error('‚ùå OpenAI returned empty message in /campaign-assistant');
      return res.status(500).json({ error: 'AI returned empty response.' });
    }

    const isFinalSummary = detectFinalSummaryMessage(rawMessage);
    let responsePayload = {};

    if (isFinalSummary) {
        console.log(`[campaign-assistant] INFO: Final summary marker detected. Attempting to parse structure.`);
        const parsedSummary = parseStructuredSummary(rawMessage);

        if (parsedSummary) {
            console.log(`[campaign-assistant] INFO: Successfully parsed structured summary. Goals (unranked):`, parsedSummary.goals);
            responsePayload = {
                ...parsedSummary, // Includes purpose, audience, target, goals (unranked array), etc.
                aiMessage: rawMessage,
                done: true,
                structured: true
            };
        } else {
            console.warn(`[campaign-assistant] WARN: Failed to parse structure from final summary text, though marker was present.`);
            responsePayload = {
                aiMessage: rawMessage,
                done: true, // Still "done" because marker was found
                structured: false // But structure parsing failed
            };
        }
    } else {
        // console.log(`[campaign-assistant] INFO: Assistant response is not final summary.`);
        responsePayload = {
            aiMessage: rawMessage,
            done: false,
            structured: false
        };
    }

    // console.log("[campaign-assistant] INFO: Sending response to frontend:", responsePayload);
    return res.status(200).json(responsePayload);

  } catch (err) {
    console.error('‚ùå Error in /campaign-assistant:', err.stack || err);
    if (err instanceof OpenAI.APIError) {
         console.error('OpenAI API Error Status:', err.status);
         console.error('OpenAI API Error Headers:', err.headers);
         console.error('OpenAI API Error Body:', err.error);
    }
    return res.status(500).json({ error: 'AI assistant failed. ' + err.message });
  }
});

export default router;
