// backend-node/routes/messaging-chat.js
import express from 'express';
import OpenAI from 'openai';

const router = express.Router();

let openai;
try {
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    if (!process.env.OPENAI_API_KEY) {
        console.error("❌ OPENAI_API_KEY is not set. Messaging chat will likely fail.");
    }
} catch (e) {
    console.error("❌ Failed to initialize OpenAI client:", e.message);
    openai = null;
}

// --- Field Definitions ---
const REQUIRED_KEYS = [ // YOUR DEFINITION OF 5 REQUIRED KEYS
    "issueName",
    "geographicContext",
    "proposedChange",
    "primaryAudience",
    "desiredOutcome"
];

// THIS MUST BE COMPREHENSIVE - MATCHING CampaignContext.jsx's initialMessagingInputsState
const ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES = {
    "issueName": "The core issue or problem your campaign addresses",
    "geographicContext": "The specific location or community context of your campaign",
    "proposedChange": "The specific change or solution your campaign is proposing",
    "primaryAudience": "The main group of people you want to reach and persuade with your messaging",
    "desiredOutcome": "The ultimate overall outcome or impact you hope to achieve with the campaign (this may be related to your main campaign goals, which we have noted from your earlier setup)",
    "campaignObjective": "A more specific objective for this particular messaging effort (e.g., what should people think, feel, or do after seeing/hearing the message?)",
    "audienceProfile.demographics": "Key demographics of your primary audience (e.g., age, gender, occupation, location, specific community groups)",
    "audienceProfile.psychographics": "Common values, attitudes, lifestyles, aspirations, or concerns of your audience",
    "audienceProfile.priorBeliefs": "What your audience likely already thinks, feels, or believes about the issue or the proposed change",
    "audienceProfile.mediaHabits": "How or where your audience typically gets their information or spends their time (e.g., specific social media, local news, community events, word-of-mouth)",
    "deliveryContext.format": "The planned formats for delivering these messages (e.g., social media posts, flyers, emails, public talks, videos)",
    "deliveryContext.messenger": "Who (person, group, or type of individual) would be the most credible or relatable to deliver these messages to your audience",
    "deliveryContext.timing": "Any specific timing considerations for when these messages should be delivered (e.g., tied to an upcoming event, a particular phase of the campaign, a specific time of year/day)",
    "knownComparisons": "Any similar campaigns or messaging efforts (from your side or others, successful or not) that you are aware of that might offer insights or lessons",
    "benchmarkData": "Any existing data, statistics, or benchmarks related to current audience awareness, attitudes, or behaviors regarding the issue"
};
const ORDERED_ALL_POTENTIAL_KEYS = Object.keys(ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES);
const OPTIONAL_KEYS = ORDERED_ALL_POTENTIAL_KEYS.filter(k => !REQUIRED_KEYS.includes(k));

const MAX_OPTIONAL_FIELDS_TO_ATTEMPT = 4; // How many optional fields we aim to fill after required ones are done.

// THIS MUST ALSO BE COMPREHENSIVE - MATCHING CampaignContext.jsx and ALL_POTENTIAL_KEYS
const initialMessagingInputsState = {
    issueName: '',
    geographicContext: '',
    proposedChange: '',
    primaryAudience: '',
    desiredOutcome: '',
    campaignObjective: '',
    audienceProfile: {
        demographics: '',
        psychographics: '',
        priorBeliefs: '',
        mediaHabits: ''
    },
    deliveryContext: {
        format: '',
        messenger: '',
        timing: ''
    },
    knownComparisons: '',
    benchmarkData: ''
};

// --- Helper Functions (getFieldValue, identifyStillNeeded, buildIntroMessage - these should be the same as my previous full response) ---
function getFieldValue(obj, path) {
    if (!obj) return undefined;
    const parts = path.split('.');
    let current = obj;
    for (const part of parts) {
        if (current && typeof current === 'object' && part in current) {
            current = current[part];
        } else { return undefined; }
    }
    return current;
}

function identifyStillNeeded(knownInputs, keysToCheck) {
    const needed = [];
    for (const key of keysToCheck) {
        const value = getFieldValue(knownInputs, key);
        if (value === undefined || value === null || (typeof value === 'string' && value.trim() === '')) {
            needed.push(key);
        }
    }
    return needed;
}

function buildIntroMessage(inputs, nextFieldKey, classification) {
    const lines = [];
    lines.push("👋 Let's work on your messaging strategy. To start, I'll confirm what I understand about your campaign so far (some of this may be pre-filled from your earlier campaign setup):");
    if (inputs.issueName) lines.push(`- **Issue**: ${inputs.issueName}`);
    if (classification && classification.primary_type) {
        lines.push(`- **Campaign Type**: ${classification.primary_type}${classification.secondary_type ? ' - ' + classification.secondary_type : ''}${classification.use_case ? ' (' + classification.use_case + ')' : ''}`);
    }
    if (inputs.primaryAudience) lines.push(`- **Primary Audience**: ${inputs.primaryAudience}`);
    if (inputs.desiredOutcome) lines.push(`- **Desired Outcome**: ${inputs.desiredOutcome}`);
    lines.push('\nOkay, let\'s dive a bit deeper.');

    const specificPrompts = { // You can expand this with more tailored first questions for other keys if desired
        'audienceProfile.demographics': "To help tailor the message, could you tell me a bit about your audience — perhaps their age, background, or who they are?",
        'campaignObjective': "For this specific messaging, what’s the main thing you want to achieve? (e.g., raise awareness, encourage an action)",
    };
    lines.push(specificPrompts[nextFieldKey] || `First, can you tell me about: ${ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[nextFieldKey]}?`);
    return lines.join('\n');
}


// --- Route Handler ---
router.post('/', async (req, res) => {
    console.log("\n=============== /api/messaging-chat HIT ===============");
    if (!openai) {
        console.error("❌ OpenAI client not initialized. Aborting.");
        return res.status(500).json({ error: 'AI service is not configured properly.' });
    }

    const { campaignId, conversationHistory, knownInputs, classification } = req.body;

    if (!conversationHistory || !Array.isArray(conversationHistory) || !knownInputs || !classification) {
        console.error("❌ Invalid request body parameters:", { /* ... */ });
        return res.status(400).json({ error: 'Missing or invalid request body parameters: conversationHistory, knownInputs, and classification are required.' });
    }
    
    let currentInputs;
    try {
        currentInputs = {
            ...initialMessagingInputsState,
            ...knownInputs,
            audienceProfile: { ...(initialMessagingInputsState.audienceProfile || {}), ...(knownInputs.audienceProfile || {}) },
            deliveryContext: { ...(initialMessagingInputsState.deliveryContext || {}), ...(knownInputs.deliveryContext || {}) },
        };
    } catch (mergeError) {
        console.error("❌ Error merging knownInputs:", mergeError);
        return res.status(500).json({ error: 'Failed to process inputs.', details: mergeError.message });
    }
    // Add console logs here if you want to inspect inputs after merge

    const stillNeededRequiredKeys = identifyStillNeeded(currentInputs, REQUIRED_KEYS);
    const stillNeededOptionalKeys = identifyStillNeeded(currentInputs, OPTIONAL_KEYS);
    const filledOptionalKeysCount = OPTIONAL_KEYS.length - stillNeededOptionalKeys.length;

    // --- Completion Logic ---
    if (stillNeededRequiredKeys.length === 0) { // All required are filled
        if (stillNeededOptionalKeys.length === 0 || filledOptionalKeysCount >= MAX_OPTIONAL_FIELDS_TO_ATTEMPT) {
            let completionMessage = "Thanks! I think we have a good amount of information to start drafting the messaging guide.";
            // ... (rest of completion message logic from previous response) ...
            console.log("BACKEND: Reporting completion. Reason:", completionMessage);
            return res.json({ aiMessage: completionMessage, updatedKnownInputs: currentInputs, fieldInFocus: null, isComplete: true });
        }
    }

    // --- Determine Next Question ---
    let nextFieldToQuery;
    let askingRequired = false;
    if (stillNeededRequiredKeys.length > 0) {
        nextFieldToQuery = stillNeededRequiredKeys[0];
        askingRequired = true;
    } else { // All required are done, ask an optional one (if not yet complete)
        nextFieldToQuery = stillNeededOptionalKeys[0]; // This must exist if not complete based on above logic
    }
    
    // --- Initial Intro Message Handling (No OpenAI call for this) ---
    if (conversationHistory.length === 0) {
        const introMessage = buildIntroMessage(currentInputs, nextFieldToQuery, classification);
        // ... (return intro message as in previous response) ...
        return res.json({ aiMessage: introMessage, updatedKnownInputs: currentInputs, fieldInFocus: nextFieldToQuery, isComplete: false });
    }

    // --- Prepare for OpenAI Call (for subsequent turns) ---
    const friendlyNameForField = ALL_POTENTIAL_KEYS_WITH_FRIENDLY_NAMES[nextFieldToQuery];
    let classificationText = "The campaign is of a general nature.";
    // ... (classificationText construction from previous response) ...
     if (classification && classification.primary_type) {
        classificationText = `This is specifically a "${classification.primary_type || ''}${classification.secondary_type ? ' - ' + classification.secondary_type : ''}${classification.use_case ? ' (' + classification.use_case + ')' : ''}" campaign.`;
        if (classification.primary_type.toLowerCase().includes('union') || 
            (classification.secondary_type && classification.secondary_type.toLowerCase().includes('workplace'))) {
            classificationText += " The user is likely an organiser or advocate familiar with workplace issues, possibly within a union context. Tailor your examples and phrasing accordingly, focusing on collective action, member engagement, and negotiations where appropriate.";
        }
    }

    const systemPrompt = `
You are a warm, thoughtful communications expert helping a user develop their messaging by filling out a communication brief.
${classificationText}
Your tone is calm, encouraging, and friendly. Avoid jargon. Ask one clear, open-ended question at a time.
The user may not know all answers; if they seem unsure or want to skip an optional question, gently acknowledge this and be ready to move to the next relevant field.

Current task: Ask for information about "${friendlyNameForField}".
This field is: ${askingRequired ? "Required information." : "Optional detail. If the user isn't sure, that's okay."}
We've already discussed some aspects. Your goal now is to specifically get input for "${friendlyNameForField}".
Keep your question focused on this.
`.trim();

    const messagesForAI = [ { role: 'system', content: systemPrompt }, ...conversationHistory ];

    try {
        console.log(`BACKEND: Making OpenAI call. Model: gpt-4o. Field in focus: ${nextFieldToQuery}`);
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o', // Using gpt-4o
            messages: messagesForAI,
            temperature: 0.7,
        });
        const aiResponseText = completion.choices[0].message.content;
        res.json({ aiMessage: aiResponseText, updatedKnownInputs: currentInputs, fieldInFocus: nextFieldToQuery, isComplete: false });
    } catch (err) {
        // ... (your existing robust error handling for OpenAI APIError etc.) ...
        console.error('❌ Messaging Chat Error:', err);
        if (err instanceof OpenAI.APIError) {
            return res.status(err.status || 500).json({ error: `OpenAI API error: ${err.name}`, details: err.message });
        }
        res.status(500).json({ error: 'Internal server error while communicating with AI.', details: err.message });
    }
    console.log("=============== /api/messaging-chat END ===============\n");
});

export default router;
