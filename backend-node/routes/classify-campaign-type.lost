// backend-node/routes/classify-campaign-type.js

import express from 'express';
import path from 'path';
import fs from 'fs/promises'; // Using fs.promises for async file reading
import { fileURLToPath } from 'url';
import { mapGoalsToCanonical, formatCanonicalGoalsForFirestore } from './goal-mapping.js'; // Ensure this path is correct

const router = express.Router();

// --- Determine Directory Path ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const dataDir = path.join(__dirname, '..', 'data'); // Assumes data folder is at backend-node/data

// --- Load JSON Data Asynchronously ---
let campaignData = {
    types: [], subtypes: [], useCases: [], goalsData: [],
    goalMappings: [],
    isLoaded: false, loadError: null,
    typesMap: new Map(), subtypesMap: new Map(), useCasesMap: new Map(),
    canonicalGoalDetails: new Map(),
    goalMappingsMap: new Map()
};

async function loadData() {
    const filesToLoad = [
        { key: 'types', file: 'campaign_types.json' },
        { key: 'subtypes', file: 'campaign_subtypes.json' },
        { key: 'useCases', file: 'campaign_use_cases.json' },
        { key: 'goalsData', file: 'campaign_goals.json' },
        { key: 'goalMappings', file: 'goal_mappings.json' },
    ];
    try {
        console.log(`[classify-campaign] INFO: Attempting to load JSON data from ${dataDir}`);
        const results = await Promise.allSettled(
            filesToLoad.map(item =>
                fs.readFile(path.join(dataDir, item.file), 'utf-8').then(JSON.parse)
            )
        );
        let allSucceeded = true;
        results.forEach((result, index) => {
            const item = filesToLoad[index];
            if (result.status === 'fulfilled') {
                campaignData[item.key] = result.value;
            } else {
                allSucceeded = false;
                console.error(`[classify-campaign] ERROR: Failed to load ${item.file}:`, result.reason);
                campaignData.loadError = campaignData.loadError || result.reason;
            }
        });

        if (!allSucceeded) {
            const goalMappingsFileConfig = filesToLoad.find(item => item.key === 'goalMappings');
            const loadedGoalMappings = campaignData.goalMappings;
            if (goalMappingsFileConfig && (!loadedGoalMappings || (Array.isArray(loadedGoalMappings) && loadedGoalMappings.length === 0))) {
                 console.error(`[classify-campaign] CRITICAL: ${goalMappingsFileConfig.file} failed to load or is empty. Classification depends heavily on this file.`);
            }
        }

        // Populate maps (ensure this logic is sound and campaignData fields are populated before use)
        if(Array.isArray(campaignData.types)) campaignData.types.forEach(t => campaignData.typesMap.set(t.id, t));
        if(Array.isArray(campaignData.subtypes)) campaignData.subtypes.forEach(st => { /* your subtype mapping logic */ });
        if(Array.isArray(campaignData.useCases)) campaignData.useCases.forEach(uc => campaignData.useCasesMap.set(uc.id, uc));

        if (Array.isArray(campaignData.goalsData)) {
            campaignData.goalsData.forEach(g => { /* your canonicalGoalDetails mapping logic */ });
        } else {
            console.error('[classify-campaign] CRITICAL: campaign_goals.json data is not an array or is missing.');
            campaignData.goalsData = [];
        }
        // console.log('[classify-campaign] DEBUG: Loaded Canonical Goal Details:', Array.from(campaignData.canonicalGoalDetails.keys()));

        if (Array.isArray(campaignData.goalMappings)) {
            campaignData.goalMappings.forEach(gm => { /* your goalMappingsMap logic */ });
        } else {
            console.error('[classify-campaign] CRITICAL: goal_mappings.json data is not an array or is missing.');
            campaignData.goalMappings = [];
        }

        if (allSucceeded) {
            campaignData.isLoaded = true;
            campaignData.loadError = null;
            console.log(`[classify-campaign] INFO: Successfully processed relational JSON data files.`);
        } else {
            console.error(`[classify-campaign] ERROR: Not all data files loaded successfully. Classification service might be impaired.`);
        }

    } catch (err) {
         campaignData.loadError = err;
         campaignData.isLoaded = false;
         console.error(`[classify-campaign] ERROR: Critical failure during data loading or processing:`, err);
    }
}

loadData(); // Call loadData to populate campaignData when the module loads

// --- Classification Logic (function classifyCampaign(summary) { ... }) ---
// (Make sure this function is defined here, using the module-scoped campaignData)
function classifyCampaign(summary) {
    // ... your existing, complete classification logic ...
    // This function will use the campaignData variable from the outer scope.
    // For example:
    // if (!campaignData.isLoaded) { console.warn("Data not loaded for classifyCampaign"); return null; }
    // const bestUseCase = campaignData.useCasesMap.get(bestUseCaseId);
    // ... etc. ...
    const matchedCanonicalGoals = [];

    if (Array.isArray(summary.goals)) {
        summary.goals.forEach((goalDescription, index) => {
            const goalDescLower = String(goalDescription).toLowerCase().trim();
            let foundMatchForThisDesc = false;
            for (const [canonId, goalDetail] of campaignData.canonicalGoalDetails.entries()) {
                if (goalDetail.keywords && goalDetail.keywords.length > 0) {
                    for (const keyword of goalDetail.keywords) {
                        const keywordPattern = new RegExp(`\\b${keyword.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i');
                        if (keywordPattern.test(goalDescLower)) {
                            matchedCanonicalGoals.push({ id: canonId, rank: index + 1 });
                            foundMatchForThisDesc = true;
                            break; 
                        }
                    }
                }
                if (foundMatchForThisDesc) break; 
            }
            if (!foundMatchForThisDesc) { /* other matching attempts */ }
            if (!foundMatchForThisDesc) {
                 console.warn(`[classify-campaign] WARN: User goal description "${goalDescription}" did not match any canonical goal.`);
            }
        });
    }
    // ... rest of your classifyCampaign logic from the complete file ...
     if (matchedCanonicalGoals.length === 0) {
        return null;
    }
    let bestUseCaseId = null;
    let highestScore = -1;
    campaignData.goalMappingsMap.forEach((useCaseGoalPriorities, useCaseId) => {
        let currentScore = 0;
        matchedCanonicalGoals.forEach(userGoal => {
            if (useCaseGoalPriorities.has(userGoal.id)) {
                currentScore += (10 - useCaseGoalPriorities.get(userGoal.id));
            }
        });
        if (currentScore > highestScore) {
            highestScore = currentScore;
            bestUseCaseId = useCaseId;
        }
    });
    if (!bestUseCaseId) return null;
    const bestUseCase = campaignData.useCasesMap.get(bestUseCaseId);
    if (!bestUseCase) return null;
    // Simplified logic for brevity, ensure your full logic is here
    const subtypeForUseCase = String(bestUseCase.subtype_id).toLowerCase().trim();
    let bestSubtype = null;
    for(const [id, subtype] of campaignData.subtypesMap.entries()){
        if(id === subtypeForUseCase || id.split('_').pop() === subtypeForUseCase){
            bestSubtype = subtype;
            break;
        }
    }
    if (!bestSubtype) return null;
    const bestType = campaignData.typesMap.get(String(bestSubtype.type_id).toLowerCase().trim());
    if (!bestType) return null;

    return {
        id: bestUseCaseId,
        primary_type: bestType.name,
        secondary_type: bestSubtype.name,
        sub_type: bestUseCase.name,
        type_id: bestType.id,
        subtype_id: bestSubtype.id,
        confidence: parseFloat(highestScore.toFixed(2))
    };
}
// --- End Classification Logic ---


// DIAGNOSTIC LOG 1 (Correct Placement)
console.log('[classify-campaign-type] campaignData at module level (after loadData call):', typeof campaignData, campaignData ? `isLoaded: ${campaignData.isLoaded}` : 'campaignData is null/undefined');

// --- Route Handler ---
router.post('/', async (req, res) => {
    // DIAGNOSTIC LOG 2 (Correct Placement)
    console.log('[classify-campaign-type] campaignData at start of route handler:', typeof campaignData, campaignData ? `isLoaded: ${campaignData.isLoaded}` : 'campaignData is null/undefined');

    const requestTimestamp = new Date().toISOString();
    console.log(`[${requestTimestamp}] INFO: Received POST /api/classify-campaign-type`);

    // This is where the error was reported
    if (!campaignData.isLoaded) {
        const loadErrorMessage = campaignData.loadError ? campaignData.loadError.message : "Unknown data loading error";
        console.error(`[${requestTimestamp}] ERROR: Classification unavailable - data not loaded. Load Error: ${loadErrorMessage}`);
        return res.status(503).json({ error: 'Classification service temporarily unavailable (data loading error).', details: loadErrorMessage });
    }

    const { summary } = req.body;
    console.log(`[${requestTimestamp}] [classify-campaign] DEBUG: Received summary for classification:`, JSON.stringify(summary, null, 2));

    if (!summary || typeof summary !== 'object' || /* ... other validation ... */ !Array.isArray(summary.goals)) {
      console.warn(`[${requestTimestamp}] WARN: Received invalid or incomplete summary object for classification.`);
      return res.status(400).json({ error: 'Invalid summary object for classification.' });
    }
    console.log(`[${requestTimestamp}] DEBUG: Received summary goals for classification:`, summary.goals);

    const classificationMatch = classifyCampaign(summary); // Uses the module-scoped campaignData

    let processedGoalsForResponse = [];
    if (Array.isArray(summary.goals) && summary.goals.length > 0) {
        try {
            const canonicalGoalIds = mapGoalsToCanonical(summary.goals);
            processedGoalsForResponse = formatCanonicalGoalsForFirestore(canonicalGoalIds);
            console.log(`[${requestTimestamp}] INFO: Successfully processed goals:`, processedGoalsForResponse);
        } catch (goalMappingError) {
            console.error(`[${requestTimestamp}] ERROR: Failed to map goals during classification:`, goalMappingError);
        }
    }

    if (!classificationMatch) {
      console.log(`[${requestTimestamp}] INFO: Classification result: No match found.`);
      return res.status(200).json({
        match: null,
        message: 'Could not classify campaign type based on provided summary goals.',
        processed_goals: processedGoalsForResponse
      });
    } else {
      console.log(`[${requestTimestamp}] INFO: Classification result: Match found - Type: ${classificationMatch.primary_type}, SubType: ${classificationMatch.secondary_type}, UseCase: ${classificationMatch.sub_type}, Confidence: ${classificationMatch.confidence}`);
      return res.status(200).json({
        match: classificationMatch,
        message: 'Campaign type classification successful.',
        processed_goals: processedGoalsForResponse
      });
    }
});
// --- End Route Handler ---

export default router;
