// backend-node/routes/messaging-chat.js
import express from 'express';
import OpenAI from 'openai';

const router = express.Router();

let openai;
try {
    openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    if (!process.env.OPENAI_API_KEY) {
        console.error("‚ùå OPENAI_API_KEY is not set. Messaging chat will likely fail.");
    }
} catch (e) {
    console.error("‚ùå Failed to initialize OpenAI client:", e.message);
    openai = null;
}

const allInputKeysWithFriendlyNames = {
  "issueName": "The issue is",
  "geographicContext": "Location/context",
  "proposedChange": "The proposed change is",
  "primaryAudience": "Target audience",
  "audienceProfile.demographics": "Audience demographics (optional)",
  "audienceProfile.psychographics": "Audience values or beliefs (optional)",
  "audienceProfile.priorBeliefs": "Audience prior beliefs (optional)",
  "audienceProfile.mediaHabits": "Audience media habits (optional)",
  "campaignObjective": "Campaign objective (optional)",
  "deliveryContext.format": "Preferred message format (optional)",
  "deliveryContext.messenger": "Preferred messenger (optional)",
  "deliveryContext.timing": "Timing or moment for delivery (optional)"
};
const orderedInputKeys = Object.keys(allInputKeysWithFriendlyNames);

const initialMessagingInputsState = {
  issueName: '',
  geographicContext: '',
  proposedChange: '',
  primaryAudience: '',
  audienceProfile: {
    demographics: '',
    psychographics: '',
    priorBeliefs: '',
    mediaHabits: ''
  },
  campaignObjective: '',
  deliveryContext: {
    format: '',
    messenger: '',
    timing: ''
  }
};

function getFieldValue(obj, path) {
  if (!obj) return undefined;
  const parts = path.split('.');
  let current = obj;
  for (const part of parts) {
    if (current && typeof current === 'object' && part in current) {
      current = current[part];
    } else {
      return undefined;
    }
  }
  return current;
}

function identifyStillNeeded(knownInputs) {
  const needed = [];
  for (const key of orderedInputKeys) {
    const value = getFieldValue(knownInputs, key);
    if (value === undefined || value === null || (typeof value === 'string' && value.trim() === '')) {
      needed.push(key);
    }
  }
  return needed;
}

function buildIntroMessage(inputs, nextFieldKey) {
  const lines = [];
  lines.push("üëã Here‚Äôs what I know about your campaign so far:");
  if (inputs.issueName) lines.push(`- **Issue**: ${inputs.issueName}`);
  if (inputs.geographicContext) lines.push(`- **Location**: ${inputs.geographicContext}`);
  if (inputs.proposedChange) lines.push(`- **Proposed change**: ${inputs.proposedChange}`);
  if (inputs.primaryAudience) lines.push(`- **Target audience**: ${inputs.primaryAudience}`);
  if (inputs.campaignObjective) lines.push(`- **Campaign goal**: ${inputs.campaignObjective}`);
  lines.push('\n');

  const prompt = {
    'audienceProfile.demographics': "Could you tell me a bit about your audience ‚Äî who they are, their age or background?",
    'audienceProfile.psychographics': "What sorts of values or beliefs are common in your audience?",
    'audienceProfile.priorBeliefs': "Do they already have views about your issue ‚Äî supportive, resistant, unsure?",
    'audienceProfile.mediaHabits': "Where does your audience usually get information ‚Äî like social media, radio, newsletters?",
    'campaignObjective': "What are you hoping the messaging will do ‚Äî raise awareness, change minds, get action?",
    'deliveryContext.format': "How are you thinking of getting this message out ‚Äî text, poster, conversation?",
    'deliveryContext.messenger': "Who would be a good person to say this message ‚Äî a local, expert, someone relatable?",
    'deliveryContext.timing': "Is there a moment you‚Äôre aiming for ‚Äî an event, deadline, or just as soon as possible?"
  };

  lines.push(prompt[nextFieldKey] || `Can you tell me more about: ${allInputKeysWithFriendlyNames[nextFieldKey]}?`);
  return lines.join('\n');
}

router.post('/', async (req, res) => {
  if (!openai) {
    return res.status(500).json({ error: 'AI service is not configured properly.' });
  }

  const { campaignId, conversationHistory, knownInputs } = req.body;

  if (!conversationHistory || !Array.isArray(conversationHistory) || !knownInputs) {
    return res.status(400).json({ error: 'Missing or invalid request body parameters: conversationHistory and knownInputs are required.' });
  }

  const currentInputs = {
    ...initialMessagingInputsState,
    ...knownInputs,
    audienceProfile: {
      ...initialMessagingInputsState.audienceProfile,
      ...(knownInputs.audienceProfile || {}),
    },
    deliveryContext: {
      ...initialMessagingInputsState.deliveryContext,
      ...(knownInputs.deliveryContext || {}),
    },
  };

  const stillNeededKeys = identifyStillNeeded(currentInputs);

  if (stillNeededKeys.length === 0) {
    return res.json({
      aiMessage: "Thanks! I‚Äôve got what I need to put together a summary.",
      updatedKnownInputs: currentInputs,
      fieldInFocus: null,
      isComplete: true
    });
  }

  const nextFieldToQuery = stillNeededKeys[0];
  const friendlyNameForField = allInputKeysWithFriendlyNames[nextFieldToQuery];

  const systemPrompt = `
You are a warm, thoughtful communications expert who specialises in helping people figure out what they want to communicate ‚Äî even if they aren‚Äôt quite sure how to explain it yet.

You work with union organisers, community leaders, activists, and advocates. They‚Äôre often experts in what they do, but not in communications. Your job is to walk them through a natural conversation to understand the basics of a campaign communication brief ‚Äî in plain language, and without using jargon that might feel technical or corporate.

- Speak in a calm, encouraging, friendly tone.
- Avoid confusing or technical communications terms like ‚Äúframing‚Äù, ‚Äútargeting‚Äù, ‚Äúsegmentation‚Äù, or ‚Äúpositioning‚Äù.
- It‚Äôs fine to talk about tone or suggest asking people to do something ‚Äî but keep it natural.
- Ask a maximum of 1‚Äì2 open-ended questions at a time.
- Aim to ask for all the fields in the brief ‚Äî even the optional ones ‚Äî but limit the interaction to a maximum of 8 total questions if needed.
- Let the client take their time and tell you about the issue in their own words.
- If they seem unsure, gently prompt them by rephrasing or giving low-key examples.

Required fields:
- The issue is
- Location/context
- The proposed change is
- Target audience

Optional info:
- Audience demographics, beliefs, values
- Media habits, messenger, timing
- Campaign objective
`.trim();

  const messagesForAI = [
    { role: 'system', content: systemPrompt },
    ...conversationHistory
  ];

  if (conversationHistory.length === 0) {
    const introMessage = buildIntroMessage(currentInputs, nextFieldToQuery);
    messagesForAI.push({ role: 'assistant', content: introMessage });
  }

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-2024-08-06',
      messages: messagesForAI,
      temperature: 0.7,
    });

    const aiResponseText = completion.choices[0].message.content;

    res.json({
      aiMessage: aiResponseText,
      updatedKnownInputs: currentInputs,
      fieldInFocus: nextFieldToQuery,
      isComplete: false
    });

  } catch (err) {
    console.error('‚ùå Messaging Chat Error:', err);
    if (err instanceof OpenAI.APIError) {
      return res.status(err.status || 500).json({ error: 'OpenAI API error', details: err.message });
    }
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

export default router;
