// backend-node/routes/classify-campaign-type.js

import express from 'express';
import path from 'path';
import fs from 'fs/promises'; // Using fs.promises for async file reading
import { fileURLToPath } from 'url';

const router = express.Router();

// --- Determine Directory Path ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const dataDir = path.join(__dirname, '..', 'data'); // Assumes data folder is at backend-node/data

// --- Load JSON Data Asynchronously ---
let campaignData = {
    types: [], subtypes: [], useCases: [], goals: [], goalMappings: [],
    isLoaded: false, loadError: null,
    typesMap: new Map(), subtypesMap: new Map(), useCasesMap: new Map(),
    goalsMap: new Map(), // For mapping various goal inputs (name, id) to a canonical ID
    goalMappingsMap: new Map(), // For mapping use_case_id to its goal priorities
    canonicalGoalNames: new Map() // Map<canonical_id, canonical_name_lower>
};

async function loadData() {
    const filesToLoad = [
        { key: 'types', file: 'campaign_types.json' },
        { key: 'subtypes', file: 'campaign_subtypes.json' },
        { key: 'useCases', file: 'campaign_use_cases.json' },
        { key: 'goals', file: 'campaign_goals.json' },
        { key: 'goalMappings', file: 'goal_mappings.json' }, // Ensure this file exists
    ];
    try {
        console.log(`[classify-campaign] INFO: Attempting to load JSON data from ${dataDir}`);
        const results = await Promise.allSettled(
            filesToLoad.map(item =>
                fs.readFile(path.join(dataDir, item.file), 'utf-8').then(JSON.parse)
            )
        );
        let allSucceeded = true;
        results.forEach((result, index) => {
            const item = filesToLoad[index];
            if (result.status === 'fulfilled') {
                campaignData[item.key] = result.value;
            } else {
                allSucceeded = false;
                console.error(`[classify-campaign] ERROR: Failed to load ${item.file}:`, result.reason);
                campaignData.loadError = campaignData.loadError || result.reason;
            }
        });
        if (!allSucceeded) {
            // If goal_mappings.json is missing, it's a critical error for classification logic
            if (filesToLoad.find(item => item.key === 'goalMappings' && !campaignData.goalMappings.length)) {
                console.error(`[classify-campaign] CRITICAL: goal_mappings.json failed to load or is empty. Classification cannot proceed effectively.`);
            }
            throw campaignData.loadError || new Error("One or more data files failed to load.");
        }

        // --- Populate maps ---
        campaignData.types.forEach(t => campaignData.typesMap.set(t.id, t));
        campaignData.subtypes.forEach(st => {
            // Typos correction from provided JSON - adjust if these are intentional variations
            if (st.id === 'envrionmental_political') { st.id = 'environmental_political'; st.type_id = 'environmental'; }
            campaignData.subtypesMap.set(st.id, st);
        });
        campaignData.useCases.forEach(uc => campaignData.useCasesMap.set(uc.id, uc));

        campaignData.goals.forEach(g => {
            let canonId = g.id.toLowerCase().trim(); // Normalize ID
            // Typo correction from provided JSON - adjust if these are intentional variations
            if (canonId === 'poltical_decision') { canonId = 'political_decision'; }

            const canonNameLower = g.name.toLowerCase().trim();
            campaignData.goalsMap.set(canonNameLower, canonId); // Map name to canonical ID
            campaignData.goalsMap.set(canonId, canonId);      // Map ID to canonical ID (self-map)
            campaignData.canonicalGoalNames.set(canonId, canonNameLower); // Store canonical ID -> lowercased name
        });
        // +++ ADDED LOG +++
        console.log('[classify-campaign] DEBUG: Loaded Canonical Goal Names Map:', Array.from(campaignData.canonicalGoalNames.entries()));

        campaignData.goalMappings.forEach(gm => {
            const priorities = new Map();
            if(Array.isArray(gm.goals)) {
                gm.goals.forEach(g => {
                    const inputGoalIdLower = g.goal_id.toLowerCase().trim();
                    const canonicalGoalId = campaignData.goalsMap.get(inputGoalIdLower); // Look up canonical ID
                    if (canonicalGoalId) {
                         priorities.set(canonicalGoalId, g.priority);
                    } else {
                         console.warn(`[classify-campaign] WARN: Goal ID "${g.goal_id}" in goal_mappings for use case "${gm.use_case_id}" could not be mapped to a canonical ID.`);
                    }
                });
            } else {
                 console.warn(`[classify-campaign] WARN: goals array missing or invalid for use_case_id "${gm.use_case_id}" in goal_mappings.json`);
            }
            campaignData.goalMappingsMap.set(gm.use_case_id, priorities);
        });
        // --- End populating maps ---

        campaignData.isLoaded = true;
        campaignData.loadError = null;
        console.log(`[classify-campaign] INFO: Successfully processed relational JSON data files.`);
    } catch (err) {
         campaignData.loadError = err;
         console.error(`[classify-campaign] ERROR: Critical failure during data loading or processing:`, err);
    }
}
loadData();
// --- End Load JSON Data ---


// --- Classification Logic ---
function classifyCampaign(summary) {
    // 1. Normalize User Goals
    const userRankedGoalIds = []; // Though goals are unranked from AI, we process them with an index as "rank"
    if (Array.isArray(summary.goals)) {
        summary.goals.forEach((goalDescription, index) => {
            const goalDescLower = String(goalDescription).toLowerCase().trim();
            let bestMatchId = null;
            let longestMatchLength = 0;

            for (const [canonId, canonNameLower] of campaignData.canonicalGoalNames.entries()) {
                const pattern = new RegExp(`(^|\\W)${canonNameLower.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}(\\W|$)`);
                if (pattern.test(goalDescLower)) {
                    if (canonNameLower.length > longestMatchLength) {
                        bestMatchId = canonId;
                        longestMatchLength = canonNameLower.length;
                    }
                }
            }

            if (bestMatchId) {
                userRankedGoalIds.push({ id: bestMatchId, rank: index + 1 }); // Use index as rank
            } else {
                // Fallback: Check if description contains parts of the ID
                for (const [canonId] of campaignData.canonicalGoalNames.entries()) {
                     const idParts = canonId.split('_');
                     if (idParts.some(part => part.length > 3 && goalDescLower.includes(part))) {
                         console.warn(`[classify-campaign] WARN: Using fallback ID part match for "${goalDescription}" -> ${canonId}`);
                         userRankedGoalIds.push({ id: canonId, rank: index + 1 });
                         bestMatchId = canonId;
                         break;
                     }
                }
                if (!bestMatchId) {
                     console.warn(`[classify-campaign] WARN: User goal description "${goalDescription}" (processed as rank ${index + 1}) did not match any canonical goal name/ID.`);
                }
            }
        });
    }
    console.log(`[classify-campaign] INFO: Normalized User Goal IDs (from unranked input):`, userRankedGoalIds);

    if (userRankedGoalIds.length === 0) {
        console.log(`[classify-campaign] INFO: No goals could be normalized. Cannot classify based on goals.`);
        return null;
    }

    // 2. Score Use Cases
    let bestUseCaseId = null;
    let highestScore = -1;

    campaignData.goalMappingsMap.forEach((useCaseGoalPriorities, useCaseId) => {
        let currentScore = 0;
        let matchedGoalCount = 0;

        userRankedGoalIds.forEach(userGoal => { // userGoal.rank is just its original index for now
            if (useCaseGoalPriorities.has(userGoal.id)) {
                matchedGoalCount++;
                const predefinedPriority = useCaseGoalPriorities.get(userGoal.id);
                // Since input goals are unranked, we treat all matched goals with equal weight for now in scoring
                // or simply count them, or use a default weight.
                // The original scoring logic used rank heavily.
                // For unranked goals, a simpler approach might be to sum priorities or count matches.
                // Let's use a simplified score: 1 point per matched goal, potentially weighted by predefinedPriority.
                // Lower predefinedPriority number means more important.
                let goalScore = predefinedPriority > 0 ? (10 - predefinedPriority) : 1; // Simple score
                currentScore += goalScore;
            }
        });

        if (matchedGoalCount > 0 && currentScore > highestScore) {
            highestScore = currentScore;
            bestUseCaseId = useCaseId;
        } else if (matchedGoalCount > 0 && currentScore === highestScore) {
            // Handle ties? For now, first one wins or could collect all ties.
            console.log(`[classify-campaign] INFO: Tie in score for Use Case ID: ${useCaseId} (Score: ${currentScore.toFixed(2)})`);
        }
    });

    if (!bestUseCaseId) {
        console.log(`[classify-campaign] INFO: No matching use case found based on goal priorities.`);
        return null;
    }
    console.log(`[classify-campaign] INFO: Best matching Use Case ID: ${bestUseCaseId} (Score: ${highestScore.toFixed(2)})`);

    // 3. Trace Hierarchy
    const bestUseCase = campaignData.useCasesMap.get(bestUseCaseId);
    if (!bestUseCase) { console.error(`[classify-campaign] ERROR: Data inconsistency - Use Case ${bestUseCaseId} not found.`); return null; }
    
    const bestSubtype = campaignData.subtypes.find(st =>
        st.id.toLowerCase() === bestUseCase.subtype_id.toLowerCase() ||
        st.name.toLowerCase() === bestUseCase.subtype_id.toLowerCase() ||
        st.id.toLowerCase().endsWith(`_${bestUseCase.subtype_id.toLowerCase()}`)
    );
    if (!bestSubtype) { console.error(`[classify-campaign] ERROR: Data inconsistency - Subtype for ${bestUseCase.subtype_id} not found.`); return null; }
    
    const bestType = campaignData.typesMap.get(bestSubtype.type_id);
    if (!bestType) { console.error(`[classify-campaign] ERROR: Data inconsistency - Type for ${bestSubtype.type_id} not found.`); return null; }
    
    console.log(`[classify-campaign] INFO: Classification Path: Type=${bestType.name}(${bestType.id}), Subtype=${bestSubtype.name}(${bestSubtype.id}), UseCase=${bestUseCase.name}(${bestUseCase.id})`);

    // 4. Construct Result
    return {
        id: bestUseCaseId,
        primary_type: bestType.name,
        secondary_type: bestSubtype.name,
        sub_type: bestUseCase.name, // This is the use case name
        type_id: bestType.id,
        subtype_id: bestSubtype.id, // This is the full subtype ID like 'union_industrial'
        confidence: highestScore // Or some other metric
    };
}
// --- End Classification Logic ---


// --- Route Handler ---
router.post('/', (req, res) => {
    const requestTimestamp = new Date().toISOString();
    console.log(`[${requestTimestamp}] INFO: Received POST /api/classify-campaign-type`);

    if (!campaignData.isLoaded) {
        console.error(`[${requestTimestamp}] ERROR: Classification unavailable - data not loaded. Load Error: ${JSON.stringify(campaignData.loadError, Object.getOwnPropertyNames(campaignData.loadError))}`);
        return res.status(503).json({ error: 'Classification service temporarily unavailable (data loading error).' });
    }

    const { summary } = req.body;

    // +++ ADDED LOG +++
    console.log(`[${requestTimestamp}] [classify-campaign] DEBUG: Received summary for classification:`, JSON.stringify(summary, null, 2));

    if (!summary || typeof summary !== 'object' || !summary.purpose || !summary.audience || !summary.target || !Array.isArray(summary.goals)) {
      console.warn(`[${requestTimestamp}] WARN: Received invalid or incomplete summary object. Keys:`, Object.keys(summary));
      return res.status(400).json({ error: 'Missing expected fields (purpose, audience, target, goals array) in summary object.' });
    }
    // Note: summary.goals will be unranked array of strings from campaign-assistant
    // The classifyCampaign function's userRankedGoalIds will use index as 'rank'

    const result = classifyCampaign(summary);

    if (!result) {
      console.log(`[${requestTimestamp}] INFO: Classification result: No match found.`);
      return res.status(200).json({
        match: null,
        confidence: 0.0, // Ensure confidence is a number
        message: 'Could not classify campaign type based on provided summary goals.'
      });
    } else {
      console.log(`[${requestTimestamp}] INFO: Classification result: Match found - Type: ${result.primary_type}, SubType: ${result.secondary_type}, UseCase: ${result.sub_type}`);
      return res.status(200).json({
        match: result,
        message: 'Campaign type classification successful.'
      });
    }
});
// --- End Route Handler ---

export default router;
