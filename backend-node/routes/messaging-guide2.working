// backend/routes/messaging-guide2.js
import express from 'express';
import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Helper function to construct the Step 1 Prompt
function getStep1Prompt(inputs) {
  const {
    issueName,
    proposedChange,
    geographicContext,
    desiredOutcome,
    primaryAudience,
    audienceProfile,
    campaignObjective,
    deliveryContext,
    knownComparisons,
    benchmarkData,
  } = inputs;

  return `
You are a cognitive linguist and expert in progressive political communications. Your primary task in this step is to conduct a deep and thorough analysis of the provided campaign information to unearth underlying frames, values, narrative structures, and potential challenges.

**Inputs:**
- Issue: ${issueName}
- Context: ${geographicContext}
- Proposed Change: ${proposedChange}
- Desired Outcome: ${desiredOutcome || 'Not specified'}
- Target Audience: ${primaryAudience}
- Audience Profile:
  - Demographics: ${audienceProfile?.demographics || 'Not specified'}
  - Psychographics: ${audienceProfile?.psychographics || 'Not specified'}
  - Prior Beliefs: ${audienceProfile?.priorBeliefs || 'Not specified'}
  - Media Habits: ${audienceProfile?.mediaHabits || 'Not specified'}
- Campaign Objective: ${campaignObjective || 'Not specified'}
- Delivery Context (Format, Messenger, Timing): 
  - Format: ${deliveryContext?.format || 'Not specified'}
  - Messenger: ${deliveryContext?.messenger || 'Not specified'}
  - Timing: ${deliveryContext?.timing || 'Not specified'}
- Known Comparisons: ${knownComparisons || 'Not provided'}
- Benchmark Data: ${benchmarkData || 'None'}

**Analysis Tasks - Please be comprehensive and detailed:**

1.  **Frame Identification & Illustration (Supporting & Opposing):**
    * Identify 4-6 dominant frames used to SUPPORT the proposed change. For each, provide a concise name (e.g., "Economic Empowerment," "Community Safety") and 1-2 sentences illustrating how this frame manifests in language or arguments.
    * Identify 4-6 dominant frames used to OPPOSE the proposed change. For each, provide a concise name (e.g., "Freedom Infringement," "Unintended Consequences") and 1-2 sentences illustrating its manifestation.

2.  **Schwartz Value Mapping:**
    * For each identified supporting frame, list the primary Schwartz Basic Human Values (e.g., Benevolence, Universalism, Self-Direction, Security, Tradition, Achievement, Hedonism, Power, Conformity, Stimulation) it most strongly evokes or appeals to. Explain your reasoning briefly.
    * For each identified opposing frame, do the same.

3.  **Narrative & Linguistic Device Analysis:**
    * Identify recurring metaphors, similes, and analogies used by proponents and opponents.
    * Pinpoint dominant moral, economic, or identity-based themes and arguments.
    * List common lexical clusters (groups of related words/phrases) associated with supporting and opposing narratives.

4.  **Comparative Campaign Analysis (If Applicable):**
    * Drawing on your knowledge base and any \`knownComparisons\` provided, briefly analyze 1-2 similar historical or international campaigns.
    * What were their dominant narratives (supporting and opposing)? What frames and values were central?
    * What key similarities and contrasts in narrative strategy can be drawn that might inform the current campaign?

5.  **Opposition Tactics & Narrative Inoculation:**
    * Based on the opposing frames and typical discourse around such issues, predict 2-3 likely opposition tactics or counter-narratives.
    * For each predicted tactic, recommend 1-2 narrative inoculation strategies (i.e., ways to preemptively address or reframe these counter-arguments).

**Output Format for this Step:**
Please structure your output clearly, using headings for each analysis task (e.g., "1. Frame Identification," "2. Schwartz Value Mapping," etc.). The goal is to produce a rich analytical document that will serve as the foundation for message synthesis in the next step. Ensure the output is a single block of text.
  `.trim();
}

// Helper function to construct the Step 2 Prompt
function getStep2Prompt(originalInputs, step1AnalysisOutput) {
  const {
    issueName,
    proposedChange,
    geographicContext,
    desiredOutcome,
    primaryAudience,
    audienceProfile,
    campaignObjective,
    deliveryContext,
    knownComparisons,
    benchmarkData,
  } = originalInputs;

  return `
You are a cognitive linguist and expert in progressive political communications. Your task in this step is to synthesize a compelling messaging guide. You will use the original campaign inputs AND the detailed "Research & Analysis Output" provided below (from Step 1) to craft your recommendations.

**Original Campaign Inputs:**
- Issue: ${issueName}
- Context: ${geographicContext}
- Proposed Change: ${proposedChange}
- Desired Outcome: ${desiredOutcome || 'Not specified'}
- Target Audience: ${primaryAudience}
- Audience Profile:
  - Demographics: ${audienceProfile?.demographics || 'Not specified'}
  - Psychographics: ${audienceProfile?.psychographics || 'Not specified'}
  - Prior Beliefs: ${audienceProfile?.priorBeliefs || 'Not specified'}
  - Media Habits: ${audienceProfile?.mediaHabits || 'Not specified'}
- Campaign Objective: ${campaignObjective || 'Not specified'}
- Delivery Context:
  - Format: ${deliveryContext?.format || 'Not specified'}
  - Messenger: ${deliveryContext?.messenger || 'Not specified'}
  - Timing: ${deliveryContext?.timing || 'Not specified'}
- Known Comparisons: ${knownComparisons || 'Not provided'}
- Benchmark Data: ${benchmarkData || 'None'}

**Step 1: Research & Analysis Output:**
--- BEGIN STEP 1 OUTPUT ---
${step1AnalysisOutput}
--- END STEP 1 OUTPUT ---

**Messaging Synthesis Tasks:**

1.  **Develop Three Persuasive Core Messages (Supporting the Change):**
    * Craft three distinct messages, approximately 100-150 words each. Each message should aim to persuade the \`primaryAudience\`.
    * **Message A (Values-Driven):** Focus heavily on the core Schwartz values identified in Step 1 as aligned with supporting frames and resonant with the audience.
    * **Message B (Identity-Driven):** Frame the issue and solution in terms of the \`primaryAudience\`'s identity, aspirations, or how it affects groups they care about.
    * **Message C (Urgency/Solution-Driven):** Emphasize the pressing need for the \`proposedChange\` and clearly articulate the tangible benefits of the \`desiredOutcome\`, highlighting the proposed change as the clear path forward.

2.  **Develop One Persuasive Opposition Message (Illustrative):**
    * Craft one message (approx 100-150 words) that effectively represents a likely persuasive argument from the opposition, drawing from the opposing frames and values identified in Step 1. This is for understanding and pre-bunking purposes.

3.  **Message Matrix & Justification (For each of the 4 messages created above):**
    * Provide the following for each message:
        * **Message Title:** A short, memorable title.
        * **Primary Frame Utilized:** (Name the frame from Step 1 analysis).
        * **Key Schwartz Values Evoked:** (List values from Step 1 analysis).
        * **Suggested Format/Channel:** (Briefly suggest a suitable format/channel from \`deliveryContext.format\` or based on \`audienceProfile.mediaHabits\`).
        * **Efficacy Score (0-100):** Your estimated score for persuasiveness with the \`primaryAudience\`.
        * **Potential Risks/Challenges:** (1-2 brief points).
        * **Justification & Suggested Improvements:** Briefly explain your efficacy score, referencing the Step 1 analysis (values, frames, audience profile). Suggest 1-2 specific ways the message could be further improved or adapted.

**Overall Tone and Style:**
Write in the voice of a senior strategist advising a values-based campaign team aiming to win both hearts and minds. The output should be practical, insightful, and directly applicable. Ensure the final output is a single block of text.
  `.trim();
}

router.post('/', async (req, res) => {
  const campaignInputs = req.body;

  // Basic validation
  const requiredFields = [
    'issueName',
    'proposedChange',
    'geographicContext',
    'primaryAudience',
    'audienceProfile',
  ];
  for (const field of requiredFields) {
    if (!campaignInputs[field]) {
      return res.status(400).json({ error: `Missing required campaign messaging input: ${field}.` });
    }
  }
  if (typeof campaignInputs.audienceProfile !== 'object' || campaignInputs.audienceProfile === null) {
      return res.status(400).json({ error: 'Audience profile must be an object.' });
  }


  try {
    // --- Step 1: Deep Research & Analysis ---
    console.log("Initiating Step 1: Deep Research & Analysis");
    const step1PromptText = getStep1Prompt(campaignInputs);
    // console.log("Step 1 Prompt:", step1PromptText); // For debugging

    const step1Completion = await openai.chat.completions.create({
      model: 'gpt-4o', // Or your preferred model
      messages: [{ role: 'system', content: step1PromptText }],
      temperature: 0.7, // Adjust as needed
    });

    const step1Output = step1Completion.choices[0].message.content;
    console.log("Step 1 Output received.");
    // console.log("Step 1 Raw Output:", step1Output); // For debugging

    // --- Step 2: Messaging Guide Synthesis ---
    console.log("Initiating Step 2: Messaging Guide Synthesis");
    const step2PromptText = getStep2Prompt(campaignInputs, step1Output);
    // console.log("Step 2 Prompt:", step2PromptText); // For debugging

    const step2Completion = await openai.chat.completions.create({
      model: 'gpt-4o', // Or your preferred model
      messages: [{ role: 'system', content: step2PromptText }],
      temperature: 0.7, // Adjust as needed
    });

    const finalMessagingGuide = step2Completion.choices[0].message.content;
    console.log("Step 2 Output (Final Messaging Guide) received.");

    res.json({ messagingGuide: finalMessagingGuide });

  } catch (error) {
    console.error('❌ Messaging Guide Error (Multi-Step):', error);
    let errorMessage = 'Failed to generate messaging guide.';
    if (error.response && error.response.data && error.response.data.error) {
        errorMessage = error.response.data.error.message || errorMessage;
    } else if (error.message) {
        errorMessage = error.message;
    }
    res.status(500).json({ error: errorMessage });
  }
});

export default router;
