    // backend-node/routes/campaign-assistant.js
    import express from 'express';
    import OpenAI from 'openai';
    import dotenv from 'dotenv';
    dotenv.config();

    const router = express.Router();
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    // --- NEW: Function to parse structured data from AI text ---
    function parseStructuredSummary(text) {
        const summary = {};
        const lines = text.split('\n');
        let goals = []; // Initialize goals array

        lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('- **Purpose:**')) {
                summary.purpose = trimmedLine.substring('- **Purpose:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Audience:**')) {
                summary.audience = trimmedLine.substring('- **Audience:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Target:**')) {
                summary.target = trimmedLine.substring('- **Target:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Intent:**')) {
                summary.intent = trimmedLine.substring('- **Intent:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Location:**')) {
                summary.location = trimmedLine.substring('- **Location:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Problem:**')) {
                summary.problem = trimmedLine.substring('- **Problem:**'.length).trim();
            } else if (trimmedLine.startsWith('- **Goals:**')) {
                // Continue processing subsequent lines for goals until a non-goal line is found
            } else if (summary.hasOwnProperty('location') && !summary.goals && /^\s*\d+\.\s/.test(trimmedLine)) {
                 // Heuristic: If we've seen location and not yet goals, and line starts with "1. ", assume it's a goal
                 // Extract goal text after "1. ", "2. ", etc.
                 const goalMatch = trimmedLine.match(/^\s*\d+\.\s*(.*)/);
                 if (goalMatch && goalMatch[1]) {
                     goals.push(goalMatch[1].trim());
                 }
            } else if (goals.length > 0 && !/^\s*\d+\.\s/.test(trimmedLine) && !summary.goals) {
                 // If we were collecting goals and hit a line that doesn't look like a goal, assign the collected goals
                 summary.goals = goals;
            }
        });

         // Assign goals if loop finished while collecting them
         if (goals.length > 0 && !summary.goals) {
             summary.goals = goals;
         }


        // Check if essential fields were parsed
        if (summary.purpose && summary.audience && summary.target && summary.goals) {
            summary.structured = true; // Mark as successfully parsed
            return summary;
        }
        return null; // Return null if essential parts weren't found
    }
    // --- END NEW FUNCTION ---


    // Detect summary ending phrase
    function detectFinalSummaryMessage(message) {
      if (!message) return false;
      const lower = message.toLowerCase();
      // Keep only the most reliable trigger phrase
      return lower.includes("✅ final summary complete");
    }

    router.post('/', async (req, res) => {
      try {
        const { input, history = [] } = req.body;

        if (!input) {
          console.error('❌ Missing input');
          return res.status(400).json({ error: 'Missing input' });
        }

        const messages = [
          {
            role: 'system',
            content: `
    You are a sharp, confident, and experienced campaign strategist who works with unions and progressive organisations. You speak in a natural, conversational tone — like an organiser who’s been there before and knows what it takes to win.
    Your job is to guide users through a quick conversation to understand their campaign, classify it, and prepare it for planning.
    You start every conversation as if you’re talking to someone who wants to make change happen — and might need a little help turning that energy into strategy.
    ⸻
    When a campaign involves pay, safety, rosters, workplace voice, or management decisions — assume it’s a union campaign. Don’t wait to be told.
    Talk like someone who knows that union power works. Use language like:
      • “Sounds like a union campaign to me — are you already organised, or is this a chance to build?”
      • “Power starts with people — do you already have union members on board?”
      • “This might be the perfect time to recruit your coworkers.”
      • “Let’s figure out if you’re ready to take action or need to build support first.”
    Never be neutral about organising. If the user describes workplace problems, help them connect that to union strength. Be strategic and persuasive — you’re here to help them win.
    ⸻
    Ask only 1–2 questions at a time, and always clarify two distinct roles:
      • Audience: who do they want to involve or mobilise? (e.g. coworkers, union members, customers)
      • Target: who holds the power to make the change? (e.g. boss, company execs, government)
    When asking about audience and target, always explain the difference like this:
      • “Let’s break it down:
         - Who do you want to join or support the campaign with you? That’s your audience — often coworkers or the public.
         - And who has the power to make the change — like approving the pay rise or stopping the cuts? That’s your target — usually a manager, board, or government.”
    ⸻
    Your goal is to collect the following structured summary. Format it EXACTLY like this example when you are finished:

    Here is the summary:

    - **Purpose:** [Campaign purpose]
    - **Audience:** [Campaign audience]
    - **Target:** [Campaign target]
    - **Intent:** [growth or change]
    - **Location:** [Location description]
    - **Problem:** [Optional: Problem description]
    - **Goals:**
      1. [Goal 1]
      2. [Goal 2]
      3. [Goal 3, optional]
      4. [Goal 4, optional]

    When you believe you have collected all necessary information and formatted the summary above, clearly conclude the conversation by typing exactly on a new line:
    ✅ Final summary complete
    Do not add any extra commentary or text after this phrase.
            `.trim(),
          },
          ...history.map((msg) => ({
            role: msg.role === 'user' ? 'user' : 'assistant', // Ensure roles are correct
            content: msg.content,
          })),
          { role: 'user', content: input },
        ];

        const completion = await openai.chat.completions.create({
          model: 'gpt-4o', // Or your preferred model
          messages,
          temperature: 0.7,
        });

        const rawMessage = completion.choices?.[0]?.message?.content?.trim();

        if (!rawMessage) {
          console.error('❌ OpenAI returned empty message');
          return res.status(500).json({ error: 'AI returned empty response.' });
        }

        const isFinalSummary = detectFinalSummaryMessage(rawMessage);
        let responsePayload = {};

        if (isFinalSummary) {
            console.log(`[campaign-assistant] INFO: Final summary detected. Attempting to parse structure.`);
            const parsedSummary = parseStructuredSummary(rawMessage);

            if (parsedSummary) {
                console.log(`[campaign-assistant] INFO: Successfully parsed structured summary.`);
                // Send back the parsed fields AND the original message
                responsePayload = {
                    ...parsedSummary, // Includes purpose, audience, target, etc.
                    aiMessage: rawMessage, // Keep the original formatted text
                    done: true,
                    structured: true // Explicitly mark as structured
                };
            } else {
                console.warn(`[campaign-assistant] WARN: Failed to parse structure from final summary text.`);
                // Fallback: Send unstructured summary
                responsePayload = {
                    aiMessage: rawMessage,
                    done: true,
                    structured: false // Mark as unstructured
                };
            }
        } else {
            console.log(`[campaign-assistant] INFO: Assistant response is not final summary.`);
            // Not the final summary, just send the message back
            responsePayload = {
                aiMessage: rawMessage,
                done: false,
                structured: false
            };
        }

        console.log("[campaign-assistant] INFO: Sending response to frontend:", responsePayload);
        return res.status(200).json(responsePayload);

      } catch (err) {
        // Log the detailed error
        console.error('❌ Error in /campaign-assistant:', err.stack || err);
        // Check for specific OpenAI errors if needed
        if (err instanceof OpenAI.APIError) {
             console.error('OpenAI API Error Status:', err.status);
             console.error('OpenAI API Error Headers:', err.headers);
             console.error('OpenAI API Error Body:', err.error);
        }
        return res.status(500).json({ error: 'AI assistant failed. ' + err.message });
      }
    });

    export default router;
    
