// backend-node/routes/save-campaign.js
import express from 'express';
import { db } from '../firebase.js'; // Ensure this path is correct for your Firebase admin init
import { Timestamp } from 'firebase-admin/firestore';

const router = express.Router();

/**
 * Helper function to save/update campaign data in Firestore.
 * @param {string} campaignId - The ID of the campaign. If null/undefined for a new campaign, this function expects it to be pre-generated.
 * @param {object} campaignData - The data to save.
 * @returns {Promise<object>} result with id
 */
async function storeCampaignInFirestore(campaignId, campaignData) {
  if (!db) {
    console.error("(ERROR) [/api/save-campaign] Firestore DB instance is not available. Firebase Admin SDK might not have initialized correctly.");
    throw new Error("Firestore service is unavailable.");
  }
  if (!campaignId) {
    // This helper now expects campaignId to be always provided.
    // If creating a new campaign, the route handler should generate/get the ID first.
    console.error("(ERROR) [/api/save-campaign] storeCampaignInFirestore called without campaignId.");
    throw new Error("Campaign ID is required to save data.");
  }

  const docRef = db.collection('campaigns').doc(campaignId);

  const dataToSave = {
    ...campaignData, // Spread the incoming data
    updatedAt: Timestamp.now(), // Add/update the timestamp
  };

  // If it's a new document (based on logic in route handler, e.g. if !campaignData.createdAt), add createdAt
  if (!campaignData.createdAt && Object.keys(campaignData).length > 0) { // Check if it's potentially a new save
      const docSnapshot = await docRef.get();
      if (!docSnapshot.exists) { // Only add createdAt if doc truly doesn't exist
          dataToSave.createdAt = Timestamp.now();
      }
  }


  await docRef.set(dataToSave, { merge: true }); // Use merge: true to update existing or create new
  console.log(`(INFO) [/api/save-campaign] Campaign data for ID: ${campaignId} saved/merged successfully.`);
  return { success: true, id: campaignId };
}

// Route to handle saving/updating campaign progress
router.post('/', async (req, res) => {
  console.log("(INFO) [/api/save-campaign] Endpoint hit.");
  
  // Destructure all expected fields, including the new ones
  const { 
    campaignId, // campaignId is now expected from the client for updates
    summary, 
    classification, 
    goals, 
    messaging_inputs,
    step1Analysis,      // New field
    messagingGuide      // New field
  } = req.body;

  // campaignId is crucial for identifying which document to update.
  // If creating a new campaign, the client should ideally get an ID first or this endpoint
  // would need a different logic path for creation vs. update.
  // The MessagingGuidePage sends campaignId, so this is primarily for updates.
  if (!campaignId) {
    console.error("(ERROR) [/api/save-campaign] Missing campaignId. Cannot save/update.");
    return res.status(400).json({ error: 'Missing campaignId. Cannot determine which campaign to update.' });
  }

  // Construct the payload with only the fields that are present in the request.
  // This allows for partial updates (e.g., just saving messaging outputs).
  const campaignDataPayload = {};
  if (summary !== undefined) campaignDataPayload.summary = summary;
  if (classification !== undefined) campaignDataPayload.classification = classification;
  if (goals !== undefined) campaignDataPayload.goals = goals;
  if (messaging_inputs !== undefined) campaignDataPayload.messaging_inputs = messaging_inputs;
  if (step1Analysis !== undefined) campaignDataPayload.step1Analysis = step1Analysis;
  if (messagingGuide !== undefined) campaignDataPayload.messagingGuide = messagingGuide;
  
  // Add userId if available in request (e.g. from auth middleware if you implement it)
  // For now, assuming it might be part of the campaignData already or not strictly needed for this update
  // if (req.user && req.user.uid) {
  //   campaignDataPayload.userId = req.user.uid;
  // }


  if (Object.keys(campaignDataPayload).length === 0) {
    console.warn("(WARN) [/api/save-campaign] No data fields provided to save for campaignId:", campaignId);
    return res.status(400).json({ error: 'No data provided to save.' });
  }

  try {
    console.log(`(INFO) [/api/save-campaign] Attempting to save/update campaign ID: ${campaignId} with payload:`, Object.keys(campaignDataPayload));
    const result = await storeCampaignInFirestore(campaignId, campaignDataPayload);
    console.log(`(INFO) [/api/save-campaign] Firestore operation successful for campaign ID ${campaignId}:`, result);
    return res.status(200).json({ ...result, message: `Campaign ${campaignId} updated successfully.` });
  } catch (error) {
    console.error(`(ERROR) [/api/save-campaign] Error saving campaign ${campaignId} to Firestore:`, error.message, error.stack);
    return res.status(500).json({ error: 'Failed to save campaign data.', details: error.message });
  }
});

export default router;
